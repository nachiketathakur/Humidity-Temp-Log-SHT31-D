
Humidity-Temp-Log-SHT31-D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003990  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003b60  08003b60  00013b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be8  08003be8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bf0  08003bf0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000068  08003c60  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08003c60  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c688  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002160  00000000  00000000  0002c763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad0  00000000  00000000  0002e8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000855  00000000  00000000  0002f398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b24  00000000  00000000  0002fbed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fff5  00000000  00000000  00052711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc55d  00000000  00000000  00062706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032bc  00000000  00000000  0012ec64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00131f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003b48 	.word	0x08003b48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08003b48 	.word	0x08003b48

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	4b34      	ldr	r3, [pc, #208]	; (8000698 <MX_GPIO_Init+0xec>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a33      	ldr	r2, [pc, #204]	; (8000698 <MX_GPIO_Init+0xec>)
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b31      	ldr	r3, [pc, #196]	; (8000698 <MX_GPIO_Init+0xec>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0304 	and.w	r3, r3, #4
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	4b2d      	ldr	r3, [pc, #180]	; (8000698 <MX_GPIO_Init+0xec>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a2c      	ldr	r2, [pc, #176]	; (8000698 <MX_GPIO_Init+0xec>)
 80005e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <MX_GPIO_Init+0xec>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b26      	ldr	r3, [pc, #152]	; (8000698 <MX_GPIO_Init+0xec>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a25      	ldr	r2, [pc, #148]	; (8000698 <MX_GPIO_Init+0xec>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <MX_GPIO_Init+0xec>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_GPIO_Init+0xec>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a1e      	ldr	r2, [pc, #120]	; (8000698 <MX_GPIO_Init+0xec>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <MX_GPIO_Init+0xec>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2120      	movs	r1, #32
 8000636:	4819      	ldr	r0, [pc, #100]	; (800069c <MX_GPIO_Init+0xf0>)
 8000638:	f000 fe2a 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800063c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000642:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	4813      	ldr	r0, [pc, #76]	; (80006a0 <MX_GPIO_Init+0xf4>)
 8000654:	f000 fc88 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000658:	2320      	movs	r3, #32
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	480b      	ldr	r0, [pc, #44]	; (800069c <MX_GPIO_Init+0xf0>)
 8000670:	f000 fc7a 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SHT31_D_ADDR_Pin;
 8000674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067a:	2300      	movs	r3, #0
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800067e:	2302      	movs	r3, #2
 8000680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SHT31_D_ADDR_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_GPIO_Init+0xf0>)
 800068a:	f000 fc6d 	bl	8000f68 <HAL_GPIO_Init>

}
 800068e:	bf00      	nop
 8000690:	3728      	adds	r7, #40	; 0x28
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40020000 	.word	0x40020000
 80006a0:	40020800 	.word	0x40020800

080006a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006aa:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <MX_I2C1_Init+0x54>)
 80006ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006b0:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_I2C1_Init+0x58>)
 80006b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006e2:	f000 fdef 	bl	80012c4 <HAL_I2C_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006ec:	f000 f8fe 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000084 	.word	0x20000084
 80006f8:	40005400 	.word	0x40005400
 80006fc:	00061a80 	.word	0x00061a80

08000700 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a19      	ldr	r2, [pc, #100]	; (8000784 <HAL_I2C_MspInit+0x84>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d12b      	bne.n	800077a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <HAL_I2C_MspInit+0x88>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <HAL_I2C_MspInit+0x88>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_I2C_MspInit+0x88>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800073e:	23c0      	movs	r3, #192	; 0xc0
 8000740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000742:	2312      	movs	r3, #18
 8000744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074a:	2303      	movs	r3, #3
 800074c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800074e:	2304      	movs	r3, #4
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <HAL_I2C_MspInit+0x8c>)
 800075a:	f000 fc05 	bl	8000f68 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <HAL_I2C_MspInit+0x88>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	4a08      	ldr	r2, [pc, #32]	; (8000788 <HAL_I2C_MspInit+0x88>)
 8000768:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800076c:	6413      	str	r3, [r2, #64]	; 0x40
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_I2C_MspInit+0x88>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	; 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40005400 	.word	0x40005400
 8000788:	40023800 	.word	0x40023800
 800078c:	40020400 	.word	0x40020400

08000790 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Redirect printf to USART2
int __io_putchar(int ch)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000798:	1d39      	adds	r1, r7, #4
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	2201      	movs	r2, #1
 80007a0:	4803      	ldr	r0, [pc, #12]	; (80007b0 <__io_putchar+0x20>)
 80007a2:	f001 fede 	bl	8002562 <HAL_UART_Transmit>
    return ch;
 80007a6:	687b      	ldr	r3, [r7, #4]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200000e0 	.word	0x200000e0

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b8:	f000 fa5a 	bl	8000c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007bc:	f000 f824 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c0:	f7ff fef4 	bl	80005ac <MX_GPIO_Init>
  MX_I2C1_Init();
 80007c4:	f7ff ff6e 	bl	80006a4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80007c8:	f000 f9b6 	bl	8000b38 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  isSensorConnected = sht31d_check_sensor((uint8_t)SENSOR_I2C_ADDR, &hi2c1);
 80007cc:	490a      	ldr	r1, [pc, #40]	; (80007f8 <main+0x44>)
 80007ce:	2088      	movs	r0, #136	; 0x88
 80007d0:	f000 f891 	bl	80008f6 <sht31d_check_sensor>
 80007d4:	4603      	mov	r3, r0
 80007d6:	461a      	mov	r2, r3
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <main+0x48>)
 80007da:	701a      	strb	r2, [r3, #0]
  // asm("NOP");
  printf("Sensor Connections Status: %d\r\n", isSensorConnected);
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <main+0x48>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	4807      	ldr	r0, [pc, #28]	; (8000800 <main+0x4c>)
 80007e4:	f002 fae2 	bl	8002dac <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Printing every 8 seconds\r\n");
 80007e8:	4806      	ldr	r0, [pc, #24]	; (8000804 <main+0x50>)
 80007ea:	f002 fb45 	bl	8002e78 <puts>
	  HAL_Delay(8000);
 80007ee:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80007f2:	f000 faaf 	bl	8000d54 <HAL_Delay>
	  printf("Printing every 8 seconds\r\n");
 80007f6:	e7f7      	b.n	80007e8 <main+0x34>
 80007f8:	20000084 	.word	0x20000084
 80007fc:	200000d8 	.word	0x200000d8
 8000800:	08003b60 	.word	0x08003b60
 8000804:	08003b80 	.word	0x08003b80

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b094      	sub	sp, #80	; 0x50
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	2234      	movs	r2, #52	; 0x34
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f002 fc0e 	bl	8003038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	4b2c      	ldr	r3, [pc, #176]	; (80008e4 <SystemClock_Config+0xdc>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	4a2b      	ldr	r2, [pc, #172]	; (80008e4 <SystemClock_Config+0xdc>)
 8000836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083a:	6413      	str	r3, [r2, #64]	; 0x40
 800083c:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <SystemClock_Config+0xdc>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000848:	2300      	movs	r3, #0
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <SystemClock_Config+0xe0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a25      	ldr	r2, [pc, #148]	; (80008e8 <SystemClock_Config+0xe0>)
 8000852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <SystemClock_Config+0xe0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000864:	2301      	movs	r3, #1
 8000866:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000868:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800086c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086e:	2302      	movs	r3, #2
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000872:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000876:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000878:	2304      	movs	r3, #4
 800087a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800087c:	23b4      	movs	r3, #180	; 0xb4
 800087e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000880:	2304      	movs	r3, #4
 8000882:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000884:	2302      	movs	r3, #2
 8000886:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000888:	2302      	movs	r3, #2
 800088a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4618      	mov	r0, r3
 8000892:	f001 fb7b 	bl	8001f8c <HAL_RCC_OscConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800089c:	f000 f826 	bl	80008ec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008a0:	f000 ffda 	bl	8001858 <HAL_PWREx_EnableOverDrive>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008aa:	f000 f81f 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	230f      	movs	r3, #15
 80008b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80008b2:	2303      	movs	r3, #3
 80008b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	2105      	movs	r1, #5
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 f813 	bl	80018f8 <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008d8:	f000 f808 	bl	80008ec <Error_Handler>
  }
}
 80008dc:	bf00      	nop
 80008de:	3750      	adds	r7, #80	; 0x50
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <Error_Handler+0x8>

080008f6 <sht31d_check_sensor>:
 */

#include "sht31-d.h"

uint8_t sht31d_check_sensor(uint8_t sensor_add, I2C_HandleTypeDef* i2cHandle)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b084      	sub	sp, #16
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	4603      	mov	r3, r0
 80008fe:	6039      	str	r1, [r7, #0]
 8000900:	71fb      	strb	r3, [r7, #7]
	uint8_t ret_val = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_IsDeviceReady(i2cHandle, sensor_add, 3, 100) == HAL_OK)
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	b299      	uxth	r1, r3
 800090a:	2364      	movs	r3, #100	; 0x64
 800090c:	2203      	movs	r2, #3
 800090e:	6838      	ldr	r0, [r7, #0]
 8000910:	f000 fe1c 	bl	800154c <HAL_I2C_IsDeviceReady>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d101      	bne.n	800091e <sht31d_check_sensor+0x28>
	{
		ret_val = 1;  // Sensor is ready
 800091a:	2301      	movs	r3, #1
 800091c:	73fb      	strb	r3, [r7, #15]
	}
	return ret_val;  // No acknowledgment received
 800091e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <HAL_MspInit+0x4c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000966:	2007      	movs	r0, #7
 8000968:	f000 faca 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800097c:	e7fe      	b.n	800097c <NMI_Handler+0x4>

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 f9a6 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	e00a      	b.n	80009f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009de:	f3af 8000 	nop.w
 80009e2:	4601      	mov	r1, r0
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	60ba      	str	r2, [r7, #8]
 80009ea:	b2ca      	uxtb	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	dbf0      	blt.n	80009de <_read+0x12>
  }

  return len;
 80009fc:	687b      	ldr	r3, [r7, #4]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	60f8      	str	r0, [r7, #12]
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	e009      	b.n	8000a2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	1c5a      	adds	r2, r3, #1
 8000a1c:	60ba      	str	r2, [r7, #8]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff feb5 	bl	8000790 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbf1      	blt.n	8000a18 <_write+0x12>
  }
  return len;
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_close>:

int _close(int file)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a66:	605a      	str	r2, [r3, #4]
  return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <_isatty>:

int _isatty(int file)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d207      	bcs.n	8000ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad8:	f002 fafc 	bl	80030d4 <__errno>
 8000adc:	4603      	mov	r3, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20020000 	.word	0x20020000
 8000b08:	00000400 	.word	0x00000400
 8000b0c:	200000dc 	.word	0x200000dc
 8000b10:	20000278 	.word	0x20000278

08000b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <MX_USART2_UART_Init+0x50>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b70:	f001 fcaa 	bl	80024c8 <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b7a:	f7ff feb7 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000e0 	.word	0x200000e0
 8000b88:	40004400 	.word	0x40004400

08000b8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a19      	ldr	r2, [pc, #100]	; (8000c10 <HAL_UART_MspInit+0x84>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d12b      	bne.n	8000c06 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf6:	2307      	movs	r3, #7
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <HAL_UART_MspInit+0x8c>)
 8000c02:	f000 f9b1 	bl	8000f68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40004400 	.word	0x40004400
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020000 	.word	0x40020000

08000c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c22:	490e      	ldr	r1, [pc, #56]	; (8000c5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c24:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c38:	4c0b      	ldr	r4, [pc, #44]	; (8000c68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c46:	f7ff ff65 	bl	8000b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4a:	f002 fa49 	bl	80030e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4e:	f7ff fdb1 	bl	80007b4 <main>
  bx  lr    
 8000c52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c60:	08003bf8 	.word	0x08003bf8
  ldr r2, =_sbss
 8000c64:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c68:	20000274 	.word	0x20000274

08000c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC_IRQHandler>
	...

08000c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <HAL_Init+0x40>)
 8000c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_Init+0x40>)
 8000c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <HAL_Init+0x40>)
 8000c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 f931 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 f808 	bl	8000cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca4:	f7ff fe40 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023c00 	.word	0x40023c00

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_InitTick+0x54>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x58>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f93b 	bl	8000f4e <HAL_SYSTICK_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00e      	b.n	8000d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d80a      	bhi.n	8000cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f000 f911 	bl	8000f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <HAL_InitTick+0x5c>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000124 	.word	0x20000124

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000124 	.word	0x20000124

08000d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d5c:	f7ff ffee 	bl	8000d3c <HAL_GetTick>
 8000d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6c:	d005      	beq.n	8000d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_Delay+0x44>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7a:	bf00      	nop
 8000d7c:	f7ff ffde 	bl	8000d3c <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8f7      	bhi.n	8000d7c <HAL_Delay+0x28>
  {
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ecc:	d301      	bcc.n	8000ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00f      	b.n	8000ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <SysTick_Config+0x40>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eda:	210f      	movs	r1, #15
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f7ff ff8e 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <SysTick_Config+0x40>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SysTick_Config+0x40>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff47 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f28:	f7ff ff5c 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff ff8e 	bl	8000e54 <NVIC_EncodePriority>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff5d 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ffb0 	bl	8000ebc <SysTick_Config>
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
 8000f82:	e165      	b.n	8001250 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f84:	2201      	movs	r2, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	f040 8154 	bne.w	800124a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d005      	beq.n	8000fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d130      	bne.n	800101c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	68da      	ldr	r2, [r3, #12]
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	091b      	lsrs	r3, r3, #4
 8001006:	f003 0201 	and.w	r2, r3, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b03      	cmp	r3, #3
 8001026:	d017      	beq.n	8001058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d123      	bne.n	80010ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	08da      	lsrs	r2, r3, #3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3208      	adds	r2, #8
 800106c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	220f      	movs	r2, #15
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	691a      	ldr	r2, [r3, #16]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	69b9      	ldr	r1, [r7, #24]
 80010a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0203 	and.w	r2, r3, #3
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 80ae 	beq.w	800124a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b5d      	ldr	r3, [pc, #372]	; (8001268 <HAL_GPIO_Init+0x300>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a5c      	ldr	r2, [pc, #368]	; (8001268 <HAL_GPIO_Init+0x300>)
 80010f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
 80010fe:	4b5a      	ldr	r3, [pc, #360]	; (8001268 <HAL_GPIO_Init+0x300>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800110a:	4a58      	ldr	r2, [pc, #352]	; (800126c <HAL_GPIO_Init+0x304>)
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	3302      	adds	r3, #2
 8001112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	220f      	movs	r2, #15
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4f      	ldr	r2, [pc, #316]	; (8001270 <HAL_GPIO_Init+0x308>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d025      	beq.n	8001182 <HAL_GPIO_Init+0x21a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4e      	ldr	r2, [pc, #312]	; (8001274 <HAL_GPIO_Init+0x30c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d01f      	beq.n	800117e <HAL_GPIO_Init+0x216>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4d      	ldr	r2, [pc, #308]	; (8001278 <HAL_GPIO_Init+0x310>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d019      	beq.n	800117a <HAL_GPIO_Init+0x212>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4c      	ldr	r2, [pc, #304]	; (800127c <HAL_GPIO_Init+0x314>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d013      	beq.n	8001176 <HAL_GPIO_Init+0x20e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4b      	ldr	r2, [pc, #300]	; (8001280 <HAL_GPIO_Init+0x318>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d00d      	beq.n	8001172 <HAL_GPIO_Init+0x20a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4a      	ldr	r2, [pc, #296]	; (8001284 <HAL_GPIO_Init+0x31c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d007      	beq.n	800116e <HAL_GPIO_Init+0x206>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a49      	ldr	r2, [pc, #292]	; (8001288 <HAL_GPIO_Init+0x320>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <HAL_GPIO_Init+0x202>
 8001166:	2306      	movs	r3, #6
 8001168:	e00c      	b.n	8001184 <HAL_GPIO_Init+0x21c>
 800116a:	2307      	movs	r3, #7
 800116c:	e00a      	b.n	8001184 <HAL_GPIO_Init+0x21c>
 800116e:	2305      	movs	r3, #5
 8001170:	e008      	b.n	8001184 <HAL_GPIO_Init+0x21c>
 8001172:	2304      	movs	r3, #4
 8001174:	e006      	b.n	8001184 <HAL_GPIO_Init+0x21c>
 8001176:	2303      	movs	r3, #3
 8001178:	e004      	b.n	8001184 <HAL_GPIO_Init+0x21c>
 800117a:	2302      	movs	r3, #2
 800117c:	e002      	b.n	8001184 <HAL_GPIO_Init+0x21c>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_GPIO_Init+0x21c>
 8001182:	2300      	movs	r3, #0
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	f002 0203 	and.w	r2, r2, #3
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	4093      	lsls	r3, r2
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001194:	4935      	ldr	r1, [pc, #212]	; (800126c <HAL_GPIO_Init+0x304>)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a2:	4b3a      	ldr	r3, [pc, #232]	; (800128c <HAL_GPIO_Init+0x324>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c6:	4a31      	ldr	r2, [pc, #196]	; (800128c <HAL_GPIO_Init+0x324>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011cc:	4b2f      	ldr	r3, [pc, #188]	; (800128c <HAL_GPIO_Init+0x324>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f0:	4a26      	ldr	r2, [pc, #152]	; (800128c <HAL_GPIO_Init+0x324>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f6:	4b25      	ldr	r3, [pc, #148]	; (800128c <HAL_GPIO_Init+0x324>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800121a:	4a1c      	ldr	r2, [pc, #112]	; (800128c <HAL_GPIO_Init+0x324>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001220:	4b1a      	ldr	r3, [pc, #104]	; (800128c <HAL_GPIO_Init+0x324>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001244:	4a11      	ldr	r2, [pc, #68]	; (800128c <HAL_GPIO_Init+0x324>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3301      	adds	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	f67f ae96 	bls.w	8000f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40013800 	.word	0x40013800
 8001270:	40020000 	.word	0x40020000
 8001274:	40020400 	.word	0x40020400
 8001278:	40020800 	.word	0x40020800
 800127c:	40020c00 	.word	0x40020c00
 8001280:	40021000 	.word	0x40021000
 8001284:	40021400 	.word	0x40021400
 8001288:	40021800 	.word	0x40021800
 800128c:	40013c00 	.word	0x40013c00

08001290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
 800129c:	4613      	mov	r3, r2
 800129e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a0:	787b      	ldrb	r3, [r7, #1]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012ac:	e003      	b.n	80012b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	041a      	lsls	r2, r3, #16
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	619a      	str	r2, [r3, #24]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e12b      	b.n	800152e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d106      	bne.n	80012f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fa08 	bl	8000700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2224      	movs	r2, #36	; 0x24
 80012f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0201 	bic.w	r2, r2, #1
 8001306:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001316:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001326:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001328:	f000 fbd8 	bl	8001adc <HAL_RCC_GetPCLK1Freq>
 800132c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4a81      	ldr	r2, [pc, #516]	; (8001538 <HAL_I2C_Init+0x274>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d807      	bhi.n	8001348 <HAL_I2C_Init+0x84>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4a80      	ldr	r2, [pc, #512]	; (800153c <HAL_I2C_Init+0x278>)
 800133c:	4293      	cmp	r3, r2
 800133e:	bf94      	ite	ls
 8001340:	2301      	movls	r3, #1
 8001342:	2300      	movhi	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	e006      	b.n	8001356 <HAL_I2C_Init+0x92>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4a7d      	ldr	r2, [pc, #500]	; (8001540 <HAL_I2C_Init+0x27c>)
 800134c:	4293      	cmp	r3, r2
 800134e:	bf94      	ite	ls
 8001350:	2301      	movls	r3, #1
 8001352:	2300      	movhi	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e0e7      	b.n	800152e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4a78      	ldr	r2, [pc, #480]	; (8001544 <HAL_I2C_Init+0x280>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	0c9b      	lsrs	r3, r3, #18
 8001368:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	430a      	orrs	r2, r1
 800137c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4a6a      	ldr	r2, [pc, #424]	; (8001538 <HAL_I2C_Init+0x274>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d802      	bhi.n	8001398 <HAL_I2C_Init+0xd4>
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	3301      	adds	r3, #1
 8001396:	e009      	b.n	80013ac <HAL_I2C_Init+0xe8>
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	4a69      	ldr	r2, [pc, #420]	; (8001548 <HAL_I2C_Init+0x284>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	099b      	lsrs	r3, r3, #6
 80013aa:	3301      	adds	r3, #1
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6812      	ldr	r2, [r2, #0]
 80013b0:	430b      	orrs	r3, r1
 80013b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	495c      	ldr	r1, [pc, #368]	; (8001538 <HAL_I2C_Init+0x274>)
 80013c8:	428b      	cmp	r3, r1
 80013ca:	d819      	bhi.n	8001400 <HAL_I2C_Init+0x13c>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	1e59      	subs	r1, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80013da:	1c59      	adds	r1, r3, #1
 80013dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013e0:	400b      	ands	r3, r1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00a      	beq.n	80013fc <HAL_I2C_Init+0x138>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1e59      	subs	r1, r3, #1
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80013f4:	3301      	adds	r3, #1
 80013f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013fa:	e051      	b.n	80014a0 <HAL_I2C_Init+0x1dc>
 80013fc:	2304      	movs	r3, #4
 80013fe:	e04f      	b.n	80014a0 <HAL_I2C_Init+0x1dc>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d111      	bne.n	800142c <HAL_I2C_Init+0x168>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1e58      	subs	r0, r3, #1
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	440b      	add	r3, r1
 8001416:	fbb0 f3f3 	udiv	r3, r0, r3
 800141a:	3301      	adds	r3, #1
 800141c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf0c      	ite	eq
 8001424:	2301      	moveq	r3, #1
 8001426:	2300      	movne	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	e012      	b.n	8001452 <HAL_I2C_Init+0x18e>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1e58      	subs	r0, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	0099      	lsls	r1, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001442:	3301      	adds	r3, #1
 8001444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001448:	2b00      	cmp	r3, #0
 800144a:	bf0c      	ite	eq
 800144c:	2301      	moveq	r3, #1
 800144e:	2300      	movne	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_I2C_Init+0x196>
 8001456:	2301      	movs	r3, #1
 8001458:	e022      	b.n	80014a0 <HAL_I2C_Init+0x1dc>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10e      	bne.n	8001480 <HAL_I2C_Init+0x1bc>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1e58      	subs	r0, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6859      	ldr	r1, [r3, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	440b      	add	r3, r1
 8001470:	fbb0 f3f3 	udiv	r3, r0, r3
 8001474:	3301      	adds	r3, #1
 8001476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800147e:	e00f      	b.n	80014a0 <HAL_I2C_Init+0x1dc>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	1e58      	subs	r0, r3, #1
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6859      	ldr	r1, [r3, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	0099      	lsls	r1, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	fbb0 f3f3 	udiv	r3, r0, r3
 8001496:	3301      	adds	r3, #1
 8001498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	6809      	ldr	r1, [r1, #0]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69da      	ldr	r2, [r3, #28]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6911      	ldr	r1, [r2, #16]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68d2      	ldr	r2, [r2, #12]
 80014da:	4311      	orrs	r1, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	430b      	orrs	r3, r1
 80014e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695a      	ldr	r2, [r3, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2220      	movs	r2, #32
 800151a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	000186a0 	.word	0x000186a0
 800153c:	001e847f 	.word	0x001e847f
 8001540:	003d08ff 	.word	0x003d08ff
 8001544:	431bde83 	.word	0x431bde83
 8001548:	10624dd3 	.word	0x10624dd3

0800154c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af02      	add	r7, sp, #8
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	460b      	mov	r3, r1
 800155a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800155c:	f7ff fbee 	bl	8000d3c <HAL_GetTick>
 8001560:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b20      	cmp	r3, #32
 8001570:	f040 8111 	bne.w	8001796 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2319      	movs	r3, #25
 800157a:	2201      	movs	r2, #1
 800157c:	4988      	ldr	r1, [pc, #544]	; (80017a0 <HAL_I2C_IsDeviceReady+0x254>)
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f000 f912 	bl	80017a8 <I2C_WaitOnFlagUntilTimeout>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800158a:	2302      	movs	r3, #2
 800158c:	e104      	b.n	8001798 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <HAL_I2C_IsDeviceReady+0x50>
 8001598:	2302      	movs	r3, #2
 800159a:	e0fd      	b.n	8001798 <HAL_I2C_IsDeviceReady+0x24c>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d007      	beq.n	80015c2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0201 	orr.w	r2, r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2224      	movs	r2, #36	; 0x24
 80015d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4a70      	ldr	r2, [pc, #448]	; (80017a4 <HAL_I2C_IsDeviceReady+0x258>)
 80015e4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015f4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f000 f8d0 	bl	80017a8 <I2C_WaitOnFlagUntilTimeout>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00d      	beq.n	800162a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800161c:	d103      	bne.n	8001626 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001624:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e0b6      	b.n	8001798 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800162a:	897b      	ldrh	r3, [r7, #10]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	461a      	mov	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001638:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800163a:	f7ff fb7f 	bl	8000d3c <HAL_GetTick>
 800163e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b02      	cmp	r3, #2
 800164c:	bf0c      	ite	eq
 800164e:	2301      	moveq	r3, #1
 8001650:	2300      	movne	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001664:	bf0c      	ite	eq
 8001666:	2301      	moveq	r3, #1
 8001668:	2300      	movne	r3, #0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800166e:	e025      	b.n	80016bc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001670:	f7ff fb64 	bl	8000d3c <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d302      	bcc.n	8001686 <HAL_I2C_IsDeviceReady+0x13a>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d103      	bne.n	800168e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	22a0      	movs	r2, #160	; 0xa0
 800168a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b02      	cmp	r3, #2
 800169a:	bf0c      	ite	eq
 800169c:	2301      	moveq	r3, #1
 800169e:	2300      	movne	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b2:	bf0c      	ite	eq
 80016b4:	2301      	moveq	r3, #1
 80016b6:	2300      	movne	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2ba0      	cmp	r3, #160	; 0xa0
 80016c6:	d005      	beq.n	80016d4 <HAL_I2C_IsDeviceReady+0x188>
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d102      	bne.n	80016d4 <HAL_I2C_IsDeviceReady+0x188>
 80016ce:	7dbb      	ldrb	r3, [r7, #22]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0cd      	beq.n	8001670 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2220      	movs	r2, #32
 80016d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d129      	bne.n	800173e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2319      	movs	r3, #25
 8001716:	2201      	movs	r2, #1
 8001718:	4921      	ldr	r1, [pc, #132]	; (80017a0 <HAL_I2C_IsDeviceReady+0x254>)
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 f844 	bl	80017a8 <I2C_WaitOnFlagUntilTimeout>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e036      	b.n	8001798 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2220      	movs	r2, #32
 800172e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e02c      	b.n	8001798 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800174c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001756:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2319      	movs	r3, #25
 800175e:	2201      	movs	r2, #1
 8001760:	490f      	ldr	r1, [pc, #60]	; (80017a0 <HAL_I2C_IsDeviceReady+0x254>)
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 f820 	bl	80017a8 <I2C_WaitOnFlagUntilTimeout>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e012      	b.n	8001798 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	3301      	adds	r3, #1
 8001776:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	f4ff af32 	bcc.w	80015e6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2220      	movs	r2, #32
 8001786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001796:	2302      	movs	r3, #2
  }
}
 8001798:	4618      	mov	r0, r3
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	00100002 	.word	0x00100002
 80017a4:	ffff0000 	.word	0xffff0000

080017a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	4613      	mov	r3, r2
 80017b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017b8:	e025      	b.n	8001806 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c0:	d021      	beq.n	8001806 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017c2:	f7ff fabb 	bl	8000d3c <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d302      	bcc.n	80017d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d116      	bne.n	8001806 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2200      	movs	r2, #0
 80017dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2220      	movs	r2, #32
 80017e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f043 0220 	orr.w	r2, r3, #32
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e023      	b.n	800184e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	0c1b      	lsrs	r3, r3, #16
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b01      	cmp	r3, #1
 800180e:	d10d      	bne.n	800182c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4013      	ands	r3, r2
 800181c:	b29b      	uxth	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	bf0c      	ite	eq
 8001822:	2301      	moveq	r3, #1
 8001824:	2300      	movne	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	461a      	mov	r2, r3
 800182a:	e00c      	b.n	8001846 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	43da      	mvns	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4013      	ands	r3, r2
 8001838:	b29b      	uxth	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	bf0c      	ite	eq
 800183e:	2301      	moveq	r3, #1
 8001840:	2300      	movne	r3, #0
 8001842:	b2db      	uxtb	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	429a      	cmp	r2, r3
 800184a:	d0b6      	beq.n	80017ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a1f      	ldr	r2, [pc, #124]	; (80018e8 <HAL_PWREx_EnableOverDrive+0x90>)
 800186c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800187e:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <HAL_PWREx_EnableOverDrive+0x94>)
 8001880:	2201      	movs	r2, #1
 8001882:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001884:	f7ff fa5a 	bl	8000d3c <HAL_GetTick>
 8001888:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800188a:	e009      	b.n	80018a0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800188c:	f7ff fa56 	bl	8000d3c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800189a:	d901      	bls.n	80018a0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e01f      	b.n	80018e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ac:	d1ee      	bne.n	800188c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018b4:	f7ff fa42 	bl	8000d3c <HAL_GetTick>
 80018b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80018ba:	e009      	b.n	80018d0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018bc:	f7ff fa3e 	bl	8000d3c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018ca:	d901      	bls.n	80018d0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e007      	b.n	80018e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018dc:	d1ee      	bne.n	80018bc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40023800 	.word	0x40023800
 80018ec:	420e0040 	.word	0x420e0040
 80018f0:	40007000 	.word	0x40007000
 80018f4:	420e0044 	.word	0x420e0044

080018f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0cc      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800190c:	4b68      	ldr	r3, [pc, #416]	; (8001ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 030f 	and.w	r3, r3, #15
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d90c      	bls.n	8001934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b65      	ldr	r3, [pc, #404]	; (8001ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001922:	4b63      	ldr	r3, [pc, #396]	; (8001ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0b8      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d020      	beq.n	8001982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800194c:	4b59      	ldr	r3, [pc, #356]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	4a58      	ldr	r2, [pc, #352]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001964:	4b53      	ldr	r3, [pc, #332]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4a52      	ldr	r2, [pc, #328]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800196e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001970:	4b50      	ldr	r3, [pc, #320]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	494d      	ldr	r1, [pc, #308]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	4313      	orrs	r3, r2
 8001980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d044      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d107      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	4b47      	ldr	r3, [pc, #284]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d119      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e07f      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d003      	beq.n	80019b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b6:	4b3f      	ldr	r3, [pc, #252]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d109      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e06f      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c6:	4b3b      	ldr	r3, [pc, #236]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e067      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d6:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f023 0203 	bic.w	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4934      	ldr	r1, [pc, #208]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e8:	f7ff f9a8 	bl	8000d3c <HAL_GetTick>
 80019ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ee:	e00a      	b.n	8001a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f0:	f7ff f9a4 	bl	8000d3c <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e04f      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a06:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 020c 	and.w	r2, r3, #12
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d1eb      	bne.n	80019f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d20c      	bcs.n	8001a40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e032      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d008      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	4916      	ldr	r1, [pc, #88]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d009      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	490e      	ldr	r1, [pc, #56]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a7e:	f000 f855 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8001a82:	4602      	mov	r2, r0
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	091b      	lsrs	r3, r3, #4
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	490a      	ldr	r1, [pc, #40]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	5ccb      	ldrb	r3, [r1, r3]
 8001a92:	fa22 f303 	lsr.w	r3, r2, r3
 8001a96:	4a09      	ldr	r2, [pc, #36]	; (8001abc <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f908 	bl	8000cb4 <HAL_InitTick>

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023c00 	.word	0x40023c00
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	08003b9c 	.word	0x08003b9c
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20000000 	.word	0x20000000

08001adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ae0:	f7ff fff0 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	0a9b      	lsrs	r3, r3, #10
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	4903      	ldr	r1, [pc, #12]	; (8001b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40023800 	.word	0x40023800
 8001b00:	08003bac 	.word	0x08003bac

08001b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b08:	f7ff ffdc 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	0b5b      	lsrs	r3, r3, #13
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4903      	ldr	r1, [pc, #12]	; (8001b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	08003bac 	.word	0x08003bac

08001b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b30:	b0ae      	sub	sp, #184	; 0xb8
 8001b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b52:	4bcb      	ldr	r3, [pc, #812]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b0c      	cmp	r3, #12
 8001b5c:	f200 8206 	bhi.w	8001f6c <HAL_RCC_GetSysClockFreq+0x440>
 8001b60:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001b9d 	.word	0x08001b9d
 8001b6c:	08001f6d 	.word	0x08001f6d
 8001b70:	08001f6d 	.word	0x08001f6d
 8001b74:	08001f6d 	.word	0x08001f6d
 8001b78:	08001ba5 	.word	0x08001ba5
 8001b7c:	08001f6d 	.word	0x08001f6d
 8001b80:	08001f6d 	.word	0x08001f6d
 8001b84:	08001f6d 	.word	0x08001f6d
 8001b88:	08001bad 	.word	0x08001bad
 8001b8c:	08001f6d 	.word	0x08001f6d
 8001b90:	08001f6d 	.word	0x08001f6d
 8001b94:	08001f6d 	.word	0x08001f6d
 8001b98:	08001d9d 	.word	0x08001d9d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b9c:	4bb9      	ldr	r3, [pc, #740]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001ba2:	e1e7      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ba4:	4bb8      	ldr	r3, [pc, #736]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001baa:	e1e3      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bac:	4bb4      	ldr	r3, [pc, #720]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb8:	4bb1      	ldr	r3, [pc, #708]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d071      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc4:	4bae      	ldr	r3, [pc, #696]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	099b      	lsrs	r3, r3, #6
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001bd0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001be0:	2300      	movs	r3, #0
 8001be2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001be6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001bea:	4622      	mov	r2, r4
 8001bec:	462b      	mov	r3, r5
 8001bee:	f04f 0000 	mov.w	r0, #0
 8001bf2:	f04f 0100 	mov.w	r1, #0
 8001bf6:	0159      	lsls	r1, r3, #5
 8001bf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bfc:	0150      	lsls	r0, r2, #5
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4621      	mov	r1, r4
 8001c04:	1a51      	subs	r1, r2, r1
 8001c06:	6439      	str	r1, [r7, #64]	; 0x40
 8001c08:	4629      	mov	r1, r5
 8001c0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001c1c:	4649      	mov	r1, r9
 8001c1e:	018b      	lsls	r3, r1, #6
 8001c20:	4641      	mov	r1, r8
 8001c22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c26:	4641      	mov	r1, r8
 8001c28:	018a      	lsls	r2, r1, #6
 8001c2a:	4641      	mov	r1, r8
 8001c2c:	1a51      	subs	r1, r2, r1
 8001c2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c30:	4649      	mov	r1, r9
 8001c32:	eb63 0301 	sbc.w	r3, r3, r1
 8001c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001c44:	4649      	mov	r1, r9
 8001c46:	00cb      	lsls	r3, r1, #3
 8001c48:	4641      	mov	r1, r8
 8001c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c4e:	4641      	mov	r1, r8
 8001c50:	00ca      	lsls	r2, r1, #3
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	4603      	mov	r3, r0
 8001c58:	4622      	mov	r2, r4
 8001c5a:	189b      	adds	r3, r3, r2
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c5e:	462b      	mov	r3, r5
 8001c60:	460a      	mov	r2, r1
 8001c62:	eb42 0303 	adc.w	r3, r2, r3
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c74:	4629      	mov	r1, r5
 8001c76:	024b      	lsls	r3, r1, #9
 8001c78:	4621      	mov	r1, r4
 8001c7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c7e:	4621      	mov	r1, r4
 8001c80:	024a      	lsls	r2, r1, #9
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001c90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001c94:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c98:	f7fe fb0a 	bl	80002b0 <__aeabi_uldivmod>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ca6:	e067      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca8:	4b75      	ldr	r3, [pc, #468]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	099b      	lsrs	r3, r3, #6
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001cb4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001cb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cc6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001cca:	4622      	mov	r2, r4
 8001ccc:	462b      	mov	r3, r5
 8001cce:	f04f 0000 	mov.w	r0, #0
 8001cd2:	f04f 0100 	mov.w	r1, #0
 8001cd6:	0159      	lsls	r1, r3, #5
 8001cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cdc:	0150      	lsls	r0, r2, #5
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	1a51      	subs	r1, r2, r1
 8001ce6:	62b9      	str	r1, [r7, #40]	; 0x28
 8001ce8:	4629      	mov	r1, r5
 8001cea:	eb63 0301 	sbc.w	r3, r3, r1
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001cfc:	4649      	mov	r1, r9
 8001cfe:	018b      	lsls	r3, r1, #6
 8001d00:	4641      	mov	r1, r8
 8001d02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d06:	4641      	mov	r1, r8
 8001d08:	018a      	lsls	r2, r1, #6
 8001d0a:	4641      	mov	r1, r8
 8001d0c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d10:	4649      	mov	r1, r9
 8001d12:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d22:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d2a:	4692      	mov	sl, r2
 8001d2c:	469b      	mov	fp, r3
 8001d2e:	4623      	mov	r3, r4
 8001d30:	eb1a 0303 	adds.w	r3, sl, r3
 8001d34:	623b      	str	r3, [r7, #32]
 8001d36:	462b      	mov	r3, r5
 8001d38:	eb4b 0303 	adc.w	r3, fp, r3
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	028b      	lsls	r3, r1, #10
 8001d4e:	4621      	mov	r1, r4
 8001d50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d54:	4621      	mov	r1, r4
 8001d56:	028a      	lsls	r2, r1, #10
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d60:	2200      	movs	r2, #0
 8001d62:	673b      	str	r3, [r7, #112]	; 0x70
 8001d64:	677a      	str	r2, [r7, #116]	; 0x74
 8001d66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001d6a:	f7fe faa1 	bl	80002b0 <__aeabi_uldivmod>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4613      	mov	r3, r2
 8001d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d78:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	0c1b      	lsrs	r3, r3, #16
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	3301      	adds	r3, #1
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001d8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d9a:	e0eb      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d9c:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001da4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001da8:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d06b      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db4:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	099b      	lsrs	r3, r3, #6
 8001dba:	2200      	movs	r2, #0
 8001dbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8001dbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001dc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dc6:	663b      	str	r3, [r7, #96]	; 0x60
 8001dc8:	2300      	movs	r3, #0
 8001dca:	667b      	str	r3, [r7, #100]	; 0x64
 8001dcc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001dd0:	4622      	mov	r2, r4
 8001dd2:	462b      	mov	r3, r5
 8001dd4:	f04f 0000 	mov.w	r0, #0
 8001dd8:	f04f 0100 	mov.w	r1, #0
 8001ddc:	0159      	lsls	r1, r3, #5
 8001dde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001de2:	0150      	lsls	r0, r2, #5
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4621      	mov	r1, r4
 8001dea:	1a51      	subs	r1, r2, r1
 8001dec:	61b9      	str	r1, [r7, #24]
 8001dee:	4629      	mov	r1, r5
 8001df0:	eb63 0301 	sbc.w	r3, r3, r1
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001e02:	4659      	mov	r1, fp
 8001e04:	018b      	lsls	r3, r1, #6
 8001e06:	4651      	mov	r1, sl
 8001e08:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e0c:	4651      	mov	r1, sl
 8001e0e:	018a      	lsls	r2, r1, #6
 8001e10:	4651      	mov	r1, sl
 8001e12:	ebb2 0801 	subs.w	r8, r2, r1
 8001e16:	4659      	mov	r1, fp
 8001e18:	eb63 0901 	sbc.w	r9, r3, r1
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e30:	4690      	mov	r8, r2
 8001e32:	4699      	mov	r9, r3
 8001e34:	4623      	mov	r3, r4
 8001e36:	eb18 0303 	adds.w	r3, r8, r3
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	462b      	mov	r3, r5
 8001e3e:	eb49 0303 	adc.w	r3, r9, r3
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001e50:	4629      	mov	r1, r5
 8001e52:	024b      	lsls	r3, r1, #9
 8001e54:	4621      	mov	r1, r4
 8001e56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	024a      	lsls	r2, r1, #9
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e66:	2200      	movs	r2, #0
 8001e68:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e6a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e70:	f7fe fa1e 	bl	80002b0 <__aeabi_uldivmod>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4613      	mov	r3, r2
 8001e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e7e:	e065      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x420>
 8001e80:	40023800 	.word	0x40023800
 8001e84:	00f42400 	.word	0x00f42400
 8001e88:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e8c:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x458>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	099b      	lsrs	r3, r3, #6
 8001e92:	2200      	movs	r2, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	4611      	mov	r1, r2
 8001e98:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e9c:	653b      	str	r3, [r7, #80]	; 0x50
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	657b      	str	r3, [r7, #84]	; 0x54
 8001ea2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001ea6:	4642      	mov	r2, r8
 8001ea8:	464b      	mov	r3, r9
 8001eaa:	f04f 0000 	mov.w	r0, #0
 8001eae:	f04f 0100 	mov.w	r1, #0
 8001eb2:	0159      	lsls	r1, r3, #5
 8001eb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eb8:	0150      	lsls	r0, r2, #5
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4641      	mov	r1, r8
 8001ec0:	1a51      	subs	r1, r2, r1
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	4649      	mov	r1, r9
 8001ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001ed8:	4659      	mov	r1, fp
 8001eda:	018b      	lsls	r3, r1, #6
 8001edc:	4651      	mov	r1, sl
 8001ede:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ee2:	4651      	mov	r1, sl
 8001ee4:	018a      	lsls	r2, r1, #6
 8001ee6:	4651      	mov	r1, sl
 8001ee8:	1a54      	subs	r4, r2, r1
 8001eea:	4659      	mov	r1, fp
 8001eec:	eb63 0501 	sbc.w	r5, r3, r1
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	00eb      	lsls	r3, r5, #3
 8001efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001efe:	00e2      	lsls	r2, r4, #3
 8001f00:	4614      	mov	r4, r2
 8001f02:	461d      	mov	r5, r3
 8001f04:	4643      	mov	r3, r8
 8001f06:	18e3      	adds	r3, r4, r3
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	464b      	mov	r3, r9
 8001f0c:	eb45 0303 	adc.w	r3, r5, r3
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f1e:	4629      	mov	r1, r5
 8001f20:	028b      	lsls	r3, r1, #10
 8001f22:	4621      	mov	r1, r4
 8001f24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f28:	4621      	mov	r1, r4
 8001f2a:	028a      	lsls	r2, r1, #10
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f34:	2200      	movs	r2, #0
 8001f36:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f38:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001f3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f3e:	f7fe f9b7 	bl	80002b0 <__aeabi_uldivmod>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4613      	mov	r3, r2
 8001f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	0f1b      	lsrs	r3, r3, #28
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001f5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f6a:	e003      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	37b8      	adds	r7, #184	; 0xb8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	00f42400 	.word	0x00f42400

08001f8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e28d      	b.n	80024ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 8083 	beq.w	80020b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fac:	4b94      	ldr	r3, [pc, #592]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 030c 	and.w	r3, r3, #12
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d019      	beq.n	8001fec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fb8:	4b91      	ldr	r3, [pc, #580]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fc4:	4b8e      	ldr	r3, [pc, #568]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fd0:	d00c      	beq.n	8001fec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fd2:	4b8b      	ldr	r3, [pc, #556]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fda:	2b0c      	cmp	r3, #12
 8001fdc:	d112      	bne.n	8002004 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fde:	4b88      	ldr	r3, [pc, #544]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fea:	d10b      	bne.n	8002004 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fec:	4b84      	ldr	r3, [pc, #528]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d05b      	beq.n	80020b0 <HAL_RCC_OscConfig+0x124>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d157      	bne.n	80020b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e25a      	b.n	80024ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200c:	d106      	bne.n	800201c <HAL_RCC_OscConfig+0x90>
 800200e:	4b7c      	ldr	r3, [pc, #496]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a7b      	ldr	r2, [pc, #492]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e01d      	b.n	8002058 <HAL_RCC_OscConfig+0xcc>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0xb4>
 8002026:	4b76      	ldr	r3, [pc, #472]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a75      	ldr	r2, [pc, #468]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 800202c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	4b73      	ldr	r3, [pc, #460]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a72      	ldr	r2, [pc, #456]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 8002038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e00b      	b.n	8002058 <HAL_RCC_OscConfig+0xcc>
 8002040:	4b6f      	ldr	r3, [pc, #444]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a6e      	ldr	r2, [pc, #440]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 8002046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	4b6c      	ldr	r3, [pc, #432]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a6b      	ldr	r2, [pc, #428]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 8002052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d013      	beq.n	8002088 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7fe fe6c 	bl	8000d3c <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002068:	f7fe fe68 	bl	8000d3c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e21f      	b.n	80024ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b61      	ldr	r3, [pc, #388]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0xdc>
 8002086:	e014      	b.n	80020b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7fe fe58 	bl	8000d3c <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002090:	f7fe fe54 	bl	8000d3c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	; 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e20b      	b.n	80024ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a2:	4b57      	ldr	r3, [pc, #348]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x104>
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d06f      	beq.n	800219e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020be:	4b50      	ldr	r3, [pc, #320]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d017      	beq.n	80020fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020ca:	4b4d      	ldr	r3, [pc, #308]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d105      	bne.n	80020e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020d6:	4b4a      	ldr	r3, [pc, #296]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00b      	beq.n	80020fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020e2:	4b47      	ldr	r3, [pc, #284]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020ea:	2b0c      	cmp	r3, #12
 80020ec:	d11c      	bne.n	8002128 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ee:	4b44      	ldr	r3, [pc, #272]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d116      	bne.n	8002128 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fa:	4b41      	ldr	r3, [pc, #260]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d005      	beq.n	8002112 <HAL_RCC_OscConfig+0x186>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d001      	beq.n	8002112 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e1d3      	b.n	80024ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002112:	4b3b      	ldr	r3, [pc, #236]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4937      	ldr	r1, [pc, #220]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002126:	e03a      	b.n	800219e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d020      	beq.n	8002172 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002130:	4b34      	ldr	r3, [pc, #208]	; (8002204 <HAL_RCC_OscConfig+0x278>)
 8002132:	2201      	movs	r2, #1
 8002134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002136:	f7fe fe01 	bl	8000d3c <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800213e:	f7fe fdfd 	bl	8000d3c <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e1b4      	b.n	80024ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002150:	4b2b      	ldr	r3, [pc, #172]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215c:	4b28      	ldr	r3, [pc, #160]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4925      	ldr	r1, [pc, #148]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]
 8002170:	e015      	b.n	800219e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002172:	4b24      	ldr	r3, [pc, #144]	; (8002204 <HAL_RCC_OscConfig+0x278>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7fe fde0 	bl	8000d3c <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002180:	f7fe fddc 	bl	8000d3c <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e193      	b.n	80024ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002192:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d036      	beq.n	8002218 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d016      	beq.n	80021e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_RCC_OscConfig+0x27c>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b8:	f7fe fdc0 	bl	8000d3c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c0:	f7fe fdbc 	bl	8000d3c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e173      	b.n	80024ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_RCC_OscConfig+0x274>)
 80021d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x234>
 80021de:	e01b      	b.n	8002218 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_OscConfig+0x27c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e6:	f7fe fda9 	bl	8000d3c <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ec:	e00e      	b.n	800220c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ee:	f7fe fda5 	bl	8000d3c <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d907      	bls.n	800220c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e15c      	b.n	80024ba <HAL_RCC_OscConfig+0x52e>
 8002200:	40023800 	.word	0x40023800
 8002204:	42470000 	.word	0x42470000
 8002208:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800220c:	4b8a      	ldr	r3, [pc, #552]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 800220e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1ea      	bne.n	80021ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 8097 	beq.w	8002354 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002226:	2300      	movs	r3, #0
 8002228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222a:	4b83      	ldr	r3, [pc, #524]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10f      	bne.n	8002256 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	4b7f      	ldr	r3, [pc, #508]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	4a7e      	ldr	r2, [pc, #504]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 8002240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002244:	6413      	str	r3, [r2, #64]	; 0x40
 8002246:	4b7c      	ldr	r3, [pc, #496]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002252:	2301      	movs	r3, #1
 8002254:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002256:	4b79      	ldr	r3, [pc, #484]	; (800243c <HAL_RCC_OscConfig+0x4b0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d118      	bne.n	8002294 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002262:	4b76      	ldr	r3, [pc, #472]	; (800243c <HAL_RCC_OscConfig+0x4b0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a75      	ldr	r2, [pc, #468]	; (800243c <HAL_RCC_OscConfig+0x4b0>)
 8002268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226e:	f7fe fd65 	bl	8000d3c <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002276:	f7fe fd61 	bl	8000d3c <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e118      	b.n	80024ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002288:	4b6c      	ldr	r3, [pc, #432]	; (800243c <HAL_RCC_OscConfig+0x4b0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x31e>
 800229c:	4b66      	ldr	r3, [pc, #408]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	4a65      	ldr	r2, [pc, #404]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6713      	str	r3, [r2, #112]	; 0x70
 80022a8:	e01c      	b.n	80022e4 <HAL_RCC_OscConfig+0x358>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x340>
 80022b2:	4b61      	ldr	r3, [pc, #388]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	4a60      	ldr	r2, [pc, #384]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 80022b8:	f043 0304 	orr.w	r3, r3, #4
 80022bc:	6713      	str	r3, [r2, #112]	; 0x70
 80022be:	4b5e      	ldr	r3, [pc, #376]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	4a5d      	ldr	r2, [pc, #372]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ca:	e00b      	b.n	80022e4 <HAL_RCC_OscConfig+0x358>
 80022cc:	4b5a      	ldr	r3, [pc, #360]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 80022ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d0:	4a59      	ldr	r2, [pc, #356]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 80022d2:	f023 0301 	bic.w	r3, r3, #1
 80022d6:	6713      	str	r3, [r2, #112]	; 0x70
 80022d8:	4b57      	ldr	r3, [pc, #348]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022dc:	4a56      	ldr	r2, [pc, #344]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 80022de:	f023 0304 	bic.w	r3, r3, #4
 80022e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d015      	beq.n	8002318 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ec:	f7fe fd26 	bl	8000d3c <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f2:	e00a      	b.n	800230a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f4:	f7fe fd22 	bl	8000d3c <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002302:	4293      	cmp	r3, r2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e0d7      	b.n	80024ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230a:	4b4b      	ldr	r3, [pc, #300]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0ee      	beq.n	80022f4 <HAL_RCC_OscConfig+0x368>
 8002316:	e014      	b.n	8002342 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7fe fd10 	bl	8000d3c <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231e:	e00a      	b.n	8002336 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002320:	f7fe fd0c 	bl	8000d3c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e0c1      	b.n	80024ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002336:	4b40      	ldr	r3, [pc, #256]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 8002338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1ee      	bne.n	8002320 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002342:	7dfb      	ldrb	r3, [r7, #23]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d105      	bne.n	8002354 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002348:	4b3b      	ldr	r3, [pc, #236]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	4a3a      	ldr	r2, [pc, #232]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 800234e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002352:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80ad 	beq.w	80024b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800235e:	4b36      	ldr	r3, [pc, #216]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b08      	cmp	r3, #8
 8002368:	d060      	beq.n	800242c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d145      	bne.n	80023fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002372:	4b33      	ldr	r3, [pc, #204]	; (8002440 <HAL_RCC_OscConfig+0x4b4>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7fe fce0 	bl	8000d3c <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002380:	f7fe fcdc 	bl	8000d3c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e093      	b.n	80024ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002392:	4b29      	ldr	r3, [pc, #164]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69da      	ldr	r2, [r3, #28]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	019b      	lsls	r3, r3, #6
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	085b      	lsrs	r3, r3, #1
 80023b6:	3b01      	subs	r3, #1
 80023b8:	041b      	lsls	r3, r3, #16
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	061b      	lsls	r3, r3, #24
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	071b      	lsls	r3, r3, #28
 80023ca:	491b      	ldr	r1, [pc, #108]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <HAL_RCC_OscConfig+0x4b4>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d6:	f7fe fcb1 	bl	8000d3c <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023de:	f7fe fcad 	bl	8000d3c <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e064      	b.n	80024ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x452>
 80023fc:	e05c      	b.n	80024b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_RCC_OscConfig+0x4b4>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe fc9a 	bl	8000d3c <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe fc96 	bl	8000d3c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e04d      	b.n	80024ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_RCC_OscConfig+0x4ac>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x480>
 800242a:	e045      	b.n	80024b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d107      	bne.n	8002444 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e040      	b.n	80024ba <HAL_RCC_OscConfig+0x52e>
 8002438:	40023800 	.word	0x40023800
 800243c:	40007000 	.word	0x40007000
 8002440:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002444:	4b1f      	ldr	r3, [pc, #124]	; (80024c4 <HAL_RCC_OscConfig+0x538>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d030      	beq.n	80024b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800245c:	429a      	cmp	r2, r3
 800245e:	d129      	bne.n	80024b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246a:	429a      	cmp	r2, r3
 800246c:	d122      	bne.n	80024b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002474:	4013      	ands	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800247a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800247c:	4293      	cmp	r3, r2
 800247e:	d119      	bne.n	80024b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	085b      	lsrs	r3, r3, #1
 800248c:	3b01      	subs	r3, #1
 800248e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d10f      	bne.n	80024b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800

080024c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e03f      	b.n	800255a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7fe fb4c 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2224      	movs	r2, #36	; 0x24
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800250a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f929 	bl	8002764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002520:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695a      	ldr	r2, [r3, #20]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002530:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002540:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b08a      	sub	sp, #40	; 0x28
 8002566:	af02      	add	r7, sp, #8
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	603b      	str	r3, [r7, #0]
 800256e:	4613      	mov	r3, r2
 8002570:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b20      	cmp	r3, #32
 8002580:	d17c      	bne.n	800267c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <HAL_UART_Transmit+0x2c>
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e075      	b.n	800267e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_UART_Transmit+0x3e>
 800259c:	2302      	movs	r3, #2
 800259e:	e06e      	b.n	800267e <HAL_UART_Transmit+0x11c>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2221      	movs	r2, #33	; 0x21
 80025b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025b6:	f7fe fbc1 	bl	8000d3c <HAL_GetTick>
 80025ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	88fa      	ldrh	r2, [r7, #6]
 80025c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	88fa      	ldrh	r2, [r7, #6]
 80025c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d0:	d108      	bne.n	80025e4 <HAL_UART_Transmit+0x82>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d104      	bne.n	80025e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	61bb      	str	r3, [r7, #24]
 80025e2:	e003      	b.n	80025ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025f4:	e02a      	b.n	800264c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2200      	movs	r2, #0
 80025fe:	2180      	movs	r1, #128	; 0x80
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 f840 	bl	8002686 <UART_WaitOnFlagUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e036      	b.n	800267e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10b      	bne.n	800262e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002624:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	3302      	adds	r3, #2
 800262a:	61bb      	str	r3, [r7, #24]
 800262c:	e007      	b.n	800263e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	781a      	ldrb	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	3301      	adds	r3, #1
 800263c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002650:	b29b      	uxth	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1cf      	bne.n	80025f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2200      	movs	r2, #0
 800265e:	2140      	movs	r1, #64	; 0x40
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 f810 	bl	8002686 <UART_WaitOnFlagUntilTimeout>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e006      	b.n	800267e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	e000      	b.n	800267e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800267c:	2302      	movs	r3, #2
  }
}
 800267e:	4618      	mov	r0, r3
 8002680:	3720      	adds	r7, #32
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b090      	sub	sp, #64	; 0x40
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	603b      	str	r3, [r7, #0]
 8002692:	4613      	mov	r3, r2
 8002694:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002696:	e050      	b.n	800273a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269e:	d04c      	beq.n	800273a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d007      	beq.n	80026b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80026a6:	f7fe fb49 	bl	8000d3c <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d241      	bcs.n	800273a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	330c      	adds	r3, #12
 80026bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c0:	e853 3f00 	ldrex	r3, [r3]
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80026cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	330c      	adds	r3, #12
 80026d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026d6:	637a      	str	r2, [r7, #52]	; 0x34
 80026d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026de:	e841 2300 	strex	r3, r2, [r1]
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80026e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1e5      	bne.n	80026b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3314      	adds	r3, #20
 80026f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	e853 3f00 	ldrex	r3, [r3]
 80026f8:	613b      	str	r3, [r7, #16]
   return(result);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	63bb      	str	r3, [r7, #56]	; 0x38
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	3314      	adds	r3, #20
 8002708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800270a:	623a      	str	r2, [r7, #32]
 800270c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800270e:	69f9      	ldr	r1, [r7, #28]
 8002710:	6a3a      	ldr	r2, [r7, #32]
 8002712:	e841 2300 	strex	r3, r2, [r1]
 8002716:	61bb      	str	r3, [r7, #24]
   return(result);
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1e5      	bne.n	80026ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e00f      	b.n	800275a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4013      	ands	r3, r2
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	429a      	cmp	r2, r3
 8002748:	bf0c      	ite	eq
 800274a:	2301      	moveq	r3, #1
 800274c:	2300      	movne	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	461a      	mov	r2, r3
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	429a      	cmp	r2, r3
 8002756:	d09f      	beq.n	8002698 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3740      	adds	r7, #64	; 0x40
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002768:	b0c0      	sub	sp, #256	; 0x100
 800276a:	af00      	add	r7, sp, #0
 800276c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800277c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002780:	68d9      	ldr	r1, [r3, #12]
 8002782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	ea40 0301 	orr.w	r3, r0, r1
 800278c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800278e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	431a      	orrs	r2, r3
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80027b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80027bc:	f021 010c 	bic.w	r1, r1, #12
 80027c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80027ca:	430b      	orrs	r3, r1
 80027cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80027da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027de:	6999      	ldr	r1, [r3, #24]
 80027e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	ea40 0301 	orr.w	r3, r0, r1
 80027ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	4b8f      	ldr	r3, [pc, #572]	; (8002a30 <UART_SetConfig+0x2cc>)
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d005      	beq.n	8002804 <UART_SetConfig+0xa0>
 80027f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4b8d      	ldr	r3, [pc, #564]	; (8002a34 <UART_SetConfig+0x2d0>)
 8002800:	429a      	cmp	r2, r3
 8002802:	d104      	bne.n	800280e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002804:	f7ff f97e 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
 8002808:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800280c:	e003      	b.n	8002816 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800280e:	f7ff f965 	bl	8001adc <HAL_RCC_GetPCLK1Freq>
 8002812:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002820:	f040 810c 	bne.w	8002a3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002828:	2200      	movs	r2, #0
 800282a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800282e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002832:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002836:	4622      	mov	r2, r4
 8002838:	462b      	mov	r3, r5
 800283a:	1891      	adds	r1, r2, r2
 800283c:	65b9      	str	r1, [r7, #88]	; 0x58
 800283e:	415b      	adcs	r3, r3
 8002840:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002842:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002846:	4621      	mov	r1, r4
 8002848:	eb12 0801 	adds.w	r8, r2, r1
 800284c:	4629      	mov	r1, r5
 800284e:	eb43 0901 	adc.w	r9, r3, r1
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800285e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002866:	4690      	mov	r8, r2
 8002868:	4699      	mov	r9, r3
 800286a:	4623      	mov	r3, r4
 800286c:	eb18 0303 	adds.w	r3, r8, r3
 8002870:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002874:	462b      	mov	r3, r5
 8002876:	eb49 0303 	adc.w	r3, r9, r3
 800287a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800287e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800288a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800288e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002892:	460b      	mov	r3, r1
 8002894:	18db      	adds	r3, r3, r3
 8002896:	653b      	str	r3, [r7, #80]	; 0x50
 8002898:	4613      	mov	r3, r2
 800289a:	eb42 0303 	adc.w	r3, r2, r3
 800289e:	657b      	str	r3, [r7, #84]	; 0x54
 80028a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80028a8:	f7fd fd02 	bl	80002b0 <__aeabi_uldivmod>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4b61      	ldr	r3, [pc, #388]	; (8002a38 <UART_SetConfig+0x2d4>)
 80028b2:	fba3 2302 	umull	r2, r3, r3, r2
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	011c      	lsls	r4, r3, #4
 80028ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028be:	2200      	movs	r2, #0
 80028c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80028c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80028cc:	4642      	mov	r2, r8
 80028ce:	464b      	mov	r3, r9
 80028d0:	1891      	adds	r1, r2, r2
 80028d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80028d4:	415b      	adcs	r3, r3
 80028d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028dc:	4641      	mov	r1, r8
 80028de:	eb12 0a01 	adds.w	sl, r2, r1
 80028e2:	4649      	mov	r1, r9
 80028e4:	eb43 0b01 	adc.w	fp, r3, r1
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028fc:	4692      	mov	sl, r2
 80028fe:	469b      	mov	fp, r3
 8002900:	4643      	mov	r3, r8
 8002902:	eb1a 0303 	adds.w	r3, sl, r3
 8002906:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800290a:	464b      	mov	r3, r9
 800290c:	eb4b 0303 	adc.w	r3, fp, r3
 8002910:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002920:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002924:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002928:	460b      	mov	r3, r1
 800292a:	18db      	adds	r3, r3, r3
 800292c:	643b      	str	r3, [r7, #64]	; 0x40
 800292e:	4613      	mov	r3, r2
 8002930:	eb42 0303 	adc.w	r3, r2, r3
 8002934:	647b      	str	r3, [r7, #68]	; 0x44
 8002936:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800293a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800293e:	f7fd fcb7 	bl	80002b0 <__aeabi_uldivmod>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4611      	mov	r1, r2
 8002948:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <UART_SetConfig+0x2d4>)
 800294a:	fba3 2301 	umull	r2, r3, r3, r1
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	2264      	movs	r2, #100	; 0x64
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	1acb      	subs	r3, r1, r3
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800295e:	4b36      	ldr	r3, [pc, #216]	; (8002a38 <UART_SetConfig+0x2d4>)
 8002960:	fba3 2302 	umull	r2, r3, r3, r2
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800296c:	441c      	add	r4, r3
 800296e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002972:	2200      	movs	r2, #0
 8002974:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002978:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800297c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002980:	4642      	mov	r2, r8
 8002982:	464b      	mov	r3, r9
 8002984:	1891      	adds	r1, r2, r2
 8002986:	63b9      	str	r1, [r7, #56]	; 0x38
 8002988:	415b      	adcs	r3, r3
 800298a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800298c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002990:	4641      	mov	r1, r8
 8002992:	1851      	adds	r1, r2, r1
 8002994:	6339      	str	r1, [r7, #48]	; 0x30
 8002996:	4649      	mov	r1, r9
 8002998:	414b      	adcs	r3, r1
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80029a8:	4659      	mov	r1, fp
 80029aa:	00cb      	lsls	r3, r1, #3
 80029ac:	4651      	mov	r1, sl
 80029ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029b2:	4651      	mov	r1, sl
 80029b4:	00ca      	lsls	r2, r1, #3
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	4642      	mov	r2, r8
 80029be:	189b      	adds	r3, r3, r2
 80029c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029c4:	464b      	mov	r3, r9
 80029c6:	460a      	mov	r2, r1
 80029c8:	eb42 0303 	adc.w	r3, r2, r3
 80029cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80029dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80029e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80029e4:	460b      	mov	r3, r1
 80029e6:	18db      	adds	r3, r3, r3
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ea:	4613      	mov	r3, r2
 80029ec:	eb42 0303 	adc.w	r3, r2, r3
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80029fa:	f7fd fc59 	bl	80002b0 <__aeabi_uldivmod>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <UART_SetConfig+0x2d4>)
 8002a04:	fba3 1302 	umull	r1, r3, r3, r2
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	2164      	movs	r1, #100	; 0x64
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	3332      	adds	r3, #50	; 0x32
 8002a16:	4a08      	ldr	r2, [pc, #32]	; (8002a38 <UART_SetConfig+0x2d4>)
 8002a18:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	f003 0207 	and.w	r2, r3, #7
 8002a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4422      	add	r2, r4
 8002a2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a2c:	e106      	b.n	8002c3c <UART_SetConfig+0x4d8>
 8002a2e:	bf00      	nop
 8002a30:	40011000 	.word	0x40011000
 8002a34:	40011400 	.word	0x40011400
 8002a38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a40:	2200      	movs	r2, #0
 8002a42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a4e:	4642      	mov	r2, r8
 8002a50:	464b      	mov	r3, r9
 8002a52:	1891      	adds	r1, r2, r2
 8002a54:	6239      	str	r1, [r7, #32]
 8002a56:	415b      	adcs	r3, r3
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a5e:	4641      	mov	r1, r8
 8002a60:	1854      	adds	r4, r2, r1
 8002a62:	4649      	mov	r1, r9
 8002a64:	eb43 0501 	adc.w	r5, r3, r1
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	00eb      	lsls	r3, r5, #3
 8002a72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a76:	00e2      	lsls	r2, r4, #3
 8002a78:	4614      	mov	r4, r2
 8002a7a:	461d      	mov	r5, r3
 8002a7c:	4643      	mov	r3, r8
 8002a7e:	18e3      	adds	r3, r4, r3
 8002a80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a84:	464b      	mov	r3, r9
 8002a86:	eb45 0303 	adc.w	r3, r5, r3
 8002a8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002aaa:	4629      	mov	r1, r5
 8002aac:	008b      	lsls	r3, r1, #2
 8002aae:	4621      	mov	r1, r4
 8002ab0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ab4:	4621      	mov	r1, r4
 8002ab6:	008a      	lsls	r2, r1, #2
 8002ab8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002abc:	f7fd fbf8 	bl	80002b0 <__aeabi_uldivmod>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4b60      	ldr	r3, [pc, #384]	; (8002c48 <UART_SetConfig+0x4e4>)
 8002ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	011c      	lsls	r4, r3, #4
 8002ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ad8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002adc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ae0:	4642      	mov	r2, r8
 8002ae2:	464b      	mov	r3, r9
 8002ae4:	1891      	adds	r1, r2, r2
 8002ae6:	61b9      	str	r1, [r7, #24]
 8002ae8:	415b      	adcs	r3, r3
 8002aea:	61fb      	str	r3, [r7, #28]
 8002aec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002af0:	4641      	mov	r1, r8
 8002af2:	1851      	adds	r1, r2, r1
 8002af4:	6139      	str	r1, [r7, #16]
 8002af6:	4649      	mov	r1, r9
 8002af8:	414b      	adcs	r3, r1
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b08:	4659      	mov	r1, fp
 8002b0a:	00cb      	lsls	r3, r1, #3
 8002b0c:	4651      	mov	r1, sl
 8002b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b12:	4651      	mov	r1, sl
 8002b14:	00ca      	lsls	r2, r1, #3
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4642      	mov	r2, r8
 8002b1e:	189b      	adds	r3, r3, r2
 8002b20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b24:	464b      	mov	r3, r9
 8002b26:	460a      	mov	r2, r1
 8002b28:	eb42 0303 	adc.w	r3, r2, r3
 8002b2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b48:	4649      	mov	r1, r9
 8002b4a:	008b      	lsls	r3, r1, #2
 8002b4c:	4641      	mov	r1, r8
 8002b4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b52:	4641      	mov	r1, r8
 8002b54:	008a      	lsls	r2, r1, #2
 8002b56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b5a:	f7fd fba9 	bl	80002b0 <__aeabi_uldivmod>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4611      	mov	r1, r2
 8002b64:	4b38      	ldr	r3, [pc, #224]	; (8002c48 <UART_SetConfig+0x4e4>)
 8002b66:	fba3 2301 	umull	r2, r3, r3, r1
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	2264      	movs	r2, #100	; 0x64
 8002b6e:	fb02 f303 	mul.w	r3, r2, r3
 8002b72:	1acb      	subs	r3, r1, r3
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	3332      	adds	r3, #50	; 0x32
 8002b78:	4a33      	ldr	r2, [pc, #204]	; (8002c48 <UART_SetConfig+0x4e4>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b84:	441c      	add	r4, r3
 8002b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	673b      	str	r3, [r7, #112]	; 0x70
 8002b8e:	677a      	str	r2, [r7, #116]	; 0x74
 8002b90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b94:	4642      	mov	r2, r8
 8002b96:	464b      	mov	r3, r9
 8002b98:	1891      	adds	r1, r2, r2
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	415b      	adcs	r3, r3
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	1851      	adds	r1, r2, r1
 8002ba8:	6039      	str	r1, [r7, #0]
 8002baa:	4649      	mov	r1, r9
 8002bac:	414b      	adcs	r3, r1
 8002bae:	607b      	str	r3, [r7, #4]
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002bbc:	4659      	mov	r1, fp
 8002bbe:	00cb      	lsls	r3, r1, #3
 8002bc0:	4651      	mov	r1, sl
 8002bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bc6:	4651      	mov	r1, sl
 8002bc8:	00ca      	lsls	r2, r1, #3
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4642      	mov	r2, r8
 8002bd2:	189b      	adds	r3, r3, r2
 8002bd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bd6:	464b      	mov	r3, r9
 8002bd8:	460a      	mov	r2, r1
 8002bda:	eb42 0303 	adc.w	r3, r2, r3
 8002bde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	663b      	str	r3, [r7, #96]	; 0x60
 8002bea:	667a      	str	r2, [r7, #100]	; 0x64
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002bf8:	4649      	mov	r1, r9
 8002bfa:	008b      	lsls	r3, r1, #2
 8002bfc:	4641      	mov	r1, r8
 8002bfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c02:	4641      	mov	r1, r8
 8002c04:	008a      	lsls	r2, r1, #2
 8002c06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c0a:	f7fd fb51 	bl	80002b0 <__aeabi_uldivmod>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <UART_SetConfig+0x4e4>)
 8002c14:	fba3 1302 	umull	r1, r3, r3, r2
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	2164      	movs	r1, #100	; 0x64
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	3332      	adds	r3, #50	; 0x32
 8002c26:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <UART_SetConfig+0x4e4>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	f003 020f 	and.w	r2, r3, #15
 8002c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4422      	add	r2, r4
 8002c3a:	609a      	str	r2, [r3, #8]
}
 8002c3c:	bf00      	nop
 8002c3e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c42:	46bd      	mov	sp, r7
 8002c44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c48:	51eb851f 	.word	0x51eb851f

08002c4c <std>:
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	b510      	push	{r4, lr}
 8002c50:	4604      	mov	r4, r0
 8002c52:	e9c0 3300 	strd	r3, r3, [r0]
 8002c56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c5a:	6083      	str	r3, [r0, #8]
 8002c5c:	8181      	strh	r1, [r0, #12]
 8002c5e:	6643      	str	r3, [r0, #100]	; 0x64
 8002c60:	81c2      	strh	r2, [r0, #14]
 8002c62:	6183      	str	r3, [r0, #24]
 8002c64:	4619      	mov	r1, r3
 8002c66:	2208      	movs	r2, #8
 8002c68:	305c      	adds	r0, #92	; 0x5c
 8002c6a:	f000 f9e5 	bl	8003038 <memset>
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <std+0x38>)
 8002c70:	6263      	str	r3, [r4, #36]	; 0x24
 8002c72:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <std+0x3c>)
 8002c74:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <std+0x40>)
 8002c78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c7a:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <std+0x44>)
 8002c7c:	6224      	str	r4, [r4, #32]
 8002c7e:	6323      	str	r3, [r4, #48]	; 0x30
 8002c80:	bd10      	pop	{r4, pc}
 8002c82:	bf00      	nop
 8002c84:	08002e89 	.word	0x08002e89
 8002c88:	08002eab 	.word	0x08002eab
 8002c8c:	08002ee3 	.word	0x08002ee3
 8002c90:	08002f07 	.word	0x08002f07

08002c94 <stdio_exit_handler>:
 8002c94:	4a02      	ldr	r2, [pc, #8]	; (8002ca0 <stdio_exit_handler+0xc>)
 8002c96:	4903      	ldr	r1, [pc, #12]	; (8002ca4 <stdio_exit_handler+0x10>)
 8002c98:	4803      	ldr	r0, [pc, #12]	; (8002ca8 <stdio_exit_handler+0x14>)
 8002c9a:	f000 b869 	b.w	8002d70 <_fwalk_sglue>
 8002c9e:	bf00      	nop
 8002ca0:	2000000c 	.word	0x2000000c
 8002ca4:	080039d1 	.word	0x080039d1
 8002ca8:	20000018 	.word	0x20000018

08002cac <cleanup_stdio>:
 8002cac:	6841      	ldr	r1, [r0, #4]
 8002cae:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <cleanup_stdio+0x34>)
 8002cb0:	4299      	cmp	r1, r3
 8002cb2:	b510      	push	{r4, lr}
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	d001      	beq.n	8002cbc <cleanup_stdio+0x10>
 8002cb8:	f000 fe8a 	bl	80039d0 <_fflush_r>
 8002cbc:	68a1      	ldr	r1, [r4, #8]
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <cleanup_stdio+0x38>)
 8002cc0:	4299      	cmp	r1, r3
 8002cc2:	d002      	beq.n	8002cca <cleanup_stdio+0x1e>
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	f000 fe83 	bl	80039d0 <_fflush_r>
 8002cca:	68e1      	ldr	r1, [r4, #12]
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <cleanup_stdio+0x3c>)
 8002cce:	4299      	cmp	r1, r3
 8002cd0:	d004      	beq.n	8002cdc <cleanup_stdio+0x30>
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cd8:	f000 be7a 	b.w	80039d0 <_fflush_r>
 8002cdc:	bd10      	pop	{r4, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000128 	.word	0x20000128
 8002ce4:	20000190 	.word	0x20000190
 8002ce8:	200001f8 	.word	0x200001f8

08002cec <global_stdio_init.part.0>:
 8002cec:	b510      	push	{r4, lr}
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <global_stdio_init.part.0+0x30>)
 8002cf0:	4c0b      	ldr	r4, [pc, #44]	; (8002d20 <global_stdio_init.part.0+0x34>)
 8002cf2:	4a0c      	ldr	r2, [pc, #48]	; (8002d24 <global_stdio_init.part.0+0x38>)
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2104      	movs	r1, #4
 8002cfc:	f7ff ffa6 	bl	8002c4c <std>
 8002d00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002d04:	2201      	movs	r2, #1
 8002d06:	2109      	movs	r1, #9
 8002d08:	f7ff ffa0 	bl	8002c4c <std>
 8002d0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002d10:	2202      	movs	r2, #2
 8002d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d16:	2112      	movs	r1, #18
 8002d18:	f7ff bf98 	b.w	8002c4c <std>
 8002d1c:	20000260 	.word	0x20000260
 8002d20:	20000128 	.word	0x20000128
 8002d24:	08002c95 	.word	0x08002c95

08002d28 <__sfp_lock_acquire>:
 8002d28:	4801      	ldr	r0, [pc, #4]	; (8002d30 <__sfp_lock_acquire+0x8>)
 8002d2a:	f000 b9fd 	b.w	8003128 <__retarget_lock_acquire_recursive>
 8002d2e:	bf00      	nop
 8002d30:	20000269 	.word	0x20000269

08002d34 <__sfp_lock_release>:
 8002d34:	4801      	ldr	r0, [pc, #4]	; (8002d3c <__sfp_lock_release+0x8>)
 8002d36:	f000 b9f8 	b.w	800312a <__retarget_lock_release_recursive>
 8002d3a:	bf00      	nop
 8002d3c:	20000269 	.word	0x20000269

08002d40 <__sinit>:
 8002d40:	b510      	push	{r4, lr}
 8002d42:	4604      	mov	r4, r0
 8002d44:	f7ff fff0 	bl	8002d28 <__sfp_lock_acquire>
 8002d48:	6a23      	ldr	r3, [r4, #32]
 8002d4a:	b11b      	cbz	r3, 8002d54 <__sinit+0x14>
 8002d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d50:	f7ff bff0 	b.w	8002d34 <__sfp_lock_release>
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <__sinit+0x28>)
 8002d56:	6223      	str	r3, [r4, #32]
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <__sinit+0x2c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f5      	bne.n	8002d4c <__sinit+0xc>
 8002d60:	f7ff ffc4 	bl	8002cec <global_stdio_init.part.0>
 8002d64:	e7f2      	b.n	8002d4c <__sinit+0xc>
 8002d66:	bf00      	nop
 8002d68:	08002cad 	.word	0x08002cad
 8002d6c:	20000260 	.word	0x20000260

08002d70 <_fwalk_sglue>:
 8002d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d74:	4607      	mov	r7, r0
 8002d76:	4688      	mov	r8, r1
 8002d78:	4614      	mov	r4, r2
 8002d7a:	2600      	movs	r6, #0
 8002d7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d80:	f1b9 0901 	subs.w	r9, r9, #1
 8002d84:	d505      	bpl.n	8002d92 <_fwalk_sglue+0x22>
 8002d86:	6824      	ldr	r4, [r4, #0]
 8002d88:	2c00      	cmp	r4, #0
 8002d8a:	d1f7      	bne.n	8002d7c <_fwalk_sglue+0xc>
 8002d8c:	4630      	mov	r0, r6
 8002d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d92:	89ab      	ldrh	r3, [r5, #12]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d907      	bls.n	8002da8 <_fwalk_sglue+0x38>
 8002d98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	d003      	beq.n	8002da8 <_fwalk_sglue+0x38>
 8002da0:	4629      	mov	r1, r5
 8002da2:	4638      	mov	r0, r7
 8002da4:	47c0      	blx	r8
 8002da6:	4306      	orrs	r6, r0
 8002da8:	3568      	adds	r5, #104	; 0x68
 8002daa:	e7e9      	b.n	8002d80 <_fwalk_sglue+0x10>

08002dac <iprintf>:
 8002dac:	b40f      	push	{r0, r1, r2, r3}
 8002dae:	b507      	push	{r0, r1, r2, lr}
 8002db0:	4906      	ldr	r1, [pc, #24]	; (8002dcc <iprintf+0x20>)
 8002db2:	ab04      	add	r3, sp, #16
 8002db4:	6808      	ldr	r0, [r1, #0]
 8002db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002dba:	6881      	ldr	r1, [r0, #8]
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	f000 fad7 	bl	8003370 <_vfiprintf_r>
 8002dc2:	b003      	add	sp, #12
 8002dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dc8:	b004      	add	sp, #16
 8002dca:	4770      	bx	lr
 8002dcc:	20000064 	.word	0x20000064

08002dd0 <_puts_r>:
 8002dd0:	6a03      	ldr	r3, [r0, #32]
 8002dd2:	b570      	push	{r4, r5, r6, lr}
 8002dd4:	6884      	ldr	r4, [r0, #8]
 8002dd6:	4605      	mov	r5, r0
 8002dd8:	460e      	mov	r6, r1
 8002dda:	b90b      	cbnz	r3, 8002de0 <_puts_r+0x10>
 8002ddc:	f7ff ffb0 	bl	8002d40 <__sinit>
 8002de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002de2:	07db      	lsls	r3, r3, #31
 8002de4:	d405      	bmi.n	8002df2 <_puts_r+0x22>
 8002de6:	89a3      	ldrh	r3, [r4, #12]
 8002de8:	0598      	lsls	r0, r3, #22
 8002dea:	d402      	bmi.n	8002df2 <_puts_r+0x22>
 8002dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dee:	f000 f99b 	bl	8003128 <__retarget_lock_acquire_recursive>
 8002df2:	89a3      	ldrh	r3, [r4, #12]
 8002df4:	0719      	lsls	r1, r3, #28
 8002df6:	d513      	bpl.n	8002e20 <_puts_r+0x50>
 8002df8:	6923      	ldr	r3, [r4, #16]
 8002dfa:	b18b      	cbz	r3, 8002e20 <_puts_r+0x50>
 8002dfc:	3e01      	subs	r6, #1
 8002dfe:	68a3      	ldr	r3, [r4, #8]
 8002e00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e04:	3b01      	subs	r3, #1
 8002e06:	60a3      	str	r3, [r4, #8]
 8002e08:	b9e9      	cbnz	r1, 8002e46 <_puts_r+0x76>
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	da2e      	bge.n	8002e6c <_puts_r+0x9c>
 8002e0e:	4622      	mov	r2, r4
 8002e10:	210a      	movs	r1, #10
 8002e12:	4628      	mov	r0, r5
 8002e14:	f000 f87b 	bl	8002f0e <__swbuf_r>
 8002e18:	3001      	adds	r0, #1
 8002e1a:	d007      	beq.n	8002e2c <_puts_r+0x5c>
 8002e1c:	250a      	movs	r5, #10
 8002e1e:	e007      	b.n	8002e30 <_puts_r+0x60>
 8002e20:	4621      	mov	r1, r4
 8002e22:	4628      	mov	r0, r5
 8002e24:	f000 f8b0 	bl	8002f88 <__swsetup_r>
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	d0e7      	beq.n	8002dfc <_puts_r+0x2c>
 8002e2c:	f04f 35ff 	mov.w	r5, #4294967295
 8002e30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e32:	07da      	lsls	r2, r3, #31
 8002e34:	d405      	bmi.n	8002e42 <_puts_r+0x72>
 8002e36:	89a3      	ldrh	r3, [r4, #12]
 8002e38:	059b      	lsls	r3, r3, #22
 8002e3a:	d402      	bmi.n	8002e42 <_puts_r+0x72>
 8002e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e3e:	f000 f974 	bl	800312a <__retarget_lock_release_recursive>
 8002e42:	4628      	mov	r0, r5
 8002e44:	bd70      	pop	{r4, r5, r6, pc}
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	da04      	bge.n	8002e54 <_puts_r+0x84>
 8002e4a:	69a2      	ldr	r2, [r4, #24]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	dc06      	bgt.n	8002e5e <_puts_r+0x8e>
 8002e50:	290a      	cmp	r1, #10
 8002e52:	d004      	beq.n	8002e5e <_puts_r+0x8e>
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	6022      	str	r2, [r4, #0]
 8002e5a:	7019      	strb	r1, [r3, #0]
 8002e5c:	e7cf      	b.n	8002dfe <_puts_r+0x2e>
 8002e5e:	4622      	mov	r2, r4
 8002e60:	4628      	mov	r0, r5
 8002e62:	f000 f854 	bl	8002f0e <__swbuf_r>
 8002e66:	3001      	adds	r0, #1
 8002e68:	d1c9      	bne.n	8002dfe <_puts_r+0x2e>
 8002e6a:	e7df      	b.n	8002e2c <_puts_r+0x5c>
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	250a      	movs	r5, #10
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	6022      	str	r2, [r4, #0]
 8002e74:	701d      	strb	r5, [r3, #0]
 8002e76:	e7db      	b.n	8002e30 <_puts_r+0x60>

08002e78 <puts>:
 8002e78:	4b02      	ldr	r3, [pc, #8]	; (8002e84 <puts+0xc>)
 8002e7a:	4601      	mov	r1, r0
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	f7ff bfa7 	b.w	8002dd0 <_puts_r>
 8002e82:	bf00      	nop
 8002e84:	20000064 	.word	0x20000064

08002e88 <__sread>:
 8002e88:	b510      	push	{r4, lr}
 8002e8a:	460c      	mov	r4, r1
 8002e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e90:	f000 f8fc 	bl	800308c <_read_r>
 8002e94:	2800      	cmp	r0, #0
 8002e96:	bfab      	itete	ge
 8002e98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e9a:	89a3      	ldrhlt	r3, [r4, #12]
 8002e9c:	181b      	addge	r3, r3, r0
 8002e9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ea2:	bfac      	ite	ge
 8002ea4:	6563      	strge	r3, [r4, #84]	; 0x54
 8002ea6:	81a3      	strhlt	r3, [r4, #12]
 8002ea8:	bd10      	pop	{r4, pc}

08002eaa <__swrite>:
 8002eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eae:	461f      	mov	r7, r3
 8002eb0:	898b      	ldrh	r3, [r1, #12]
 8002eb2:	05db      	lsls	r3, r3, #23
 8002eb4:	4605      	mov	r5, r0
 8002eb6:	460c      	mov	r4, r1
 8002eb8:	4616      	mov	r6, r2
 8002eba:	d505      	bpl.n	8002ec8 <__swrite+0x1e>
 8002ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f000 f8d0 	bl	8003068 <_lseek_r>
 8002ec8:	89a3      	ldrh	r3, [r4, #12]
 8002eca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ece:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ed2:	81a3      	strh	r3, [r4, #12]
 8002ed4:	4632      	mov	r2, r6
 8002ed6:	463b      	mov	r3, r7
 8002ed8:	4628      	mov	r0, r5
 8002eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ede:	f000 b8e7 	b.w	80030b0 <_write_r>

08002ee2 <__sseek>:
 8002ee2:	b510      	push	{r4, lr}
 8002ee4:	460c      	mov	r4, r1
 8002ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eea:	f000 f8bd 	bl	8003068 <_lseek_r>
 8002eee:	1c43      	adds	r3, r0, #1
 8002ef0:	89a3      	ldrh	r3, [r4, #12]
 8002ef2:	bf15      	itete	ne
 8002ef4:	6560      	strne	r0, [r4, #84]	; 0x54
 8002ef6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002efa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002efe:	81a3      	strheq	r3, [r4, #12]
 8002f00:	bf18      	it	ne
 8002f02:	81a3      	strhne	r3, [r4, #12]
 8002f04:	bd10      	pop	{r4, pc}

08002f06 <__sclose>:
 8002f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f0a:	f000 b89d 	b.w	8003048 <_close_r>

08002f0e <__swbuf_r>:
 8002f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f10:	460e      	mov	r6, r1
 8002f12:	4614      	mov	r4, r2
 8002f14:	4605      	mov	r5, r0
 8002f16:	b118      	cbz	r0, 8002f20 <__swbuf_r+0x12>
 8002f18:	6a03      	ldr	r3, [r0, #32]
 8002f1a:	b90b      	cbnz	r3, 8002f20 <__swbuf_r+0x12>
 8002f1c:	f7ff ff10 	bl	8002d40 <__sinit>
 8002f20:	69a3      	ldr	r3, [r4, #24]
 8002f22:	60a3      	str	r3, [r4, #8]
 8002f24:	89a3      	ldrh	r3, [r4, #12]
 8002f26:	071a      	lsls	r2, r3, #28
 8002f28:	d525      	bpl.n	8002f76 <__swbuf_r+0x68>
 8002f2a:	6923      	ldr	r3, [r4, #16]
 8002f2c:	b31b      	cbz	r3, 8002f76 <__swbuf_r+0x68>
 8002f2e:	6823      	ldr	r3, [r4, #0]
 8002f30:	6922      	ldr	r2, [r4, #16]
 8002f32:	1a98      	subs	r0, r3, r2
 8002f34:	6963      	ldr	r3, [r4, #20]
 8002f36:	b2f6      	uxtb	r6, r6
 8002f38:	4283      	cmp	r3, r0
 8002f3a:	4637      	mov	r7, r6
 8002f3c:	dc04      	bgt.n	8002f48 <__swbuf_r+0x3a>
 8002f3e:	4621      	mov	r1, r4
 8002f40:	4628      	mov	r0, r5
 8002f42:	f000 fd45 	bl	80039d0 <_fflush_r>
 8002f46:	b9e0      	cbnz	r0, 8002f82 <__swbuf_r+0x74>
 8002f48:	68a3      	ldr	r3, [r4, #8]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	60a3      	str	r3, [r4, #8]
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	6022      	str	r2, [r4, #0]
 8002f54:	701e      	strb	r6, [r3, #0]
 8002f56:	6962      	ldr	r2, [r4, #20]
 8002f58:	1c43      	adds	r3, r0, #1
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d004      	beq.n	8002f68 <__swbuf_r+0x5a>
 8002f5e:	89a3      	ldrh	r3, [r4, #12]
 8002f60:	07db      	lsls	r3, r3, #31
 8002f62:	d506      	bpl.n	8002f72 <__swbuf_r+0x64>
 8002f64:	2e0a      	cmp	r6, #10
 8002f66:	d104      	bne.n	8002f72 <__swbuf_r+0x64>
 8002f68:	4621      	mov	r1, r4
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	f000 fd30 	bl	80039d0 <_fflush_r>
 8002f70:	b938      	cbnz	r0, 8002f82 <__swbuf_r+0x74>
 8002f72:	4638      	mov	r0, r7
 8002f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f76:	4621      	mov	r1, r4
 8002f78:	4628      	mov	r0, r5
 8002f7a:	f000 f805 	bl	8002f88 <__swsetup_r>
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	d0d5      	beq.n	8002f2e <__swbuf_r+0x20>
 8002f82:	f04f 37ff 	mov.w	r7, #4294967295
 8002f86:	e7f4      	b.n	8002f72 <__swbuf_r+0x64>

08002f88 <__swsetup_r>:
 8002f88:	b538      	push	{r3, r4, r5, lr}
 8002f8a:	4b2a      	ldr	r3, [pc, #168]	; (8003034 <__swsetup_r+0xac>)
 8002f8c:	4605      	mov	r5, r0
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	460c      	mov	r4, r1
 8002f92:	b118      	cbz	r0, 8002f9c <__swsetup_r+0x14>
 8002f94:	6a03      	ldr	r3, [r0, #32]
 8002f96:	b90b      	cbnz	r3, 8002f9c <__swsetup_r+0x14>
 8002f98:	f7ff fed2 	bl	8002d40 <__sinit>
 8002f9c:	89a3      	ldrh	r3, [r4, #12]
 8002f9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fa2:	0718      	lsls	r0, r3, #28
 8002fa4:	d422      	bmi.n	8002fec <__swsetup_r+0x64>
 8002fa6:	06d9      	lsls	r1, r3, #27
 8002fa8:	d407      	bmi.n	8002fba <__swsetup_r+0x32>
 8002faa:	2309      	movs	r3, #9
 8002fac:	602b      	str	r3, [r5, #0]
 8002fae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002fb2:	81a3      	strh	r3, [r4, #12]
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb8:	e034      	b.n	8003024 <__swsetup_r+0x9c>
 8002fba:	0758      	lsls	r0, r3, #29
 8002fbc:	d512      	bpl.n	8002fe4 <__swsetup_r+0x5c>
 8002fbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fc0:	b141      	cbz	r1, 8002fd4 <__swsetup_r+0x4c>
 8002fc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fc6:	4299      	cmp	r1, r3
 8002fc8:	d002      	beq.n	8002fd0 <__swsetup_r+0x48>
 8002fca:	4628      	mov	r0, r5
 8002fcc:	f000 f8ae 	bl	800312c <_free_r>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	6363      	str	r3, [r4, #52]	; 0x34
 8002fd4:	89a3      	ldrh	r3, [r4, #12]
 8002fd6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fda:	81a3      	strh	r3, [r4, #12]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	6063      	str	r3, [r4, #4]
 8002fe0:	6923      	ldr	r3, [r4, #16]
 8002fe2:	6023      	str	r3, [r4, #0]
 8002fe4:	89a3      	ldrh	r3, [r4, #12]
 8002fe6:	f043 0308 	orr.w	r3, r3, #8
 8002fea:	81a3      	strh	r3, [r4, #12]
 8002fec:	6923      	ldr	r3, [r4, #16]
 8002fee:	b94b      	cbnz	r3, 8003004 <__swsetup_r+0x7c>
 8002ff0:	89a3      	ldrh	r3, [r4, #12]
 8002ff2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ffa:	d003      	beq.n	8003004 <__swsetup_r+0x7c>
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	4628      	mov	r0, r5
 8003000:	f000 fd34 	bl	8003a6c <__smakebuf_r>
 8003004:	89a0      	ldrh	r0, [r4, #12]
 8003006:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800300a:	f010 0301 	ands.w	r3, r0, #1
 800300e:	d00a      	beq.n	8003026 <__swsetup_r+0x9e>
 8003010:	2300      	movs	r3, #0
 8003012:	60a3      	str	r3, [r4, #8]
 8003014:	6963      	ldr	r3, [r4, #20]
 8003016:	425b      	negs	r3, r3
 8003018:	61a3      	str	r3, [r4, #24]
 800301a:	6923      	ldr	r3, [r4, #16]
 800301c:	b943      	cbnz	r3, 8003030 <__swsetup_r+0xa8>
 800301e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003022:	d1c4      	bne.n	8002fae <__swsetup_r+0x26>
 8003024:	bd38      	pop	{r3, r4, r5, pc}
 8003026:	0781      	lsls	r1, r0, #30
 8003028:	bf58      	it	pl
 800302a:	6963      	ldrpl	r3, [r4, #20]
 800302c:	60a3      	str	r3, [r4, #8]
 800302e:	e7f4      	b.n	800301a <__swsetup_r+0x92>
 8003030:	2000      	movs	r0, #0
 8003032:	e7f7      	b.n	8003024 <__swsetup_r+0x9c>
 8003034:	20000064 	.word	0x20000064

08003038 <memset>:
 8003038:	4402      	add	r2, r0
 800303a:	4603      	mov	r3, r0
 800303c:	4293      	cmp	r3, r2
 800303e:	d100      	bne.n	8003042 <memset+0xa>
 8003040:	4770      	bx	lr
 8003042:	f803 1b01 	strb.w	r1, [r3], #1
 8003046:	e7f9      	b.n	800303c <memset+0x4>

08003048 <_close_r>:
 8003048:	b538      	push	{r3, r4, r5, lr}
 800304a:	4d06      	ldr	r5, [pc, #24]	; (8003064 <_close_r+0x1c>)
 800304c:	2300      	movs	r3, #0
 800304e:	4604      	mov	r4, r0
 8003050:	4608      	mov	r0, r1
 8003052:	602b      	str	r3, [r5, #0]
 8003054:	f7fd fcf3 	bl	8000a3e <_close>
 8003058:	1c43      	adds	r3, r0, #1
 800305a:	d102      	bne.n	8003062 <_close_r+0x1a>
 800305c:	682b      	ldr	r3, [r5, #0]
 800305e:	b103      	cbz	r3, 8003062 <_close_r+0x1a>
 8003060:	6023      	str	r3, [r4, #0]
 8003062:	bd38      	pop	{r3, r4, r5, pc}
 8003064:	20000264 	.word	0x20000264

08003068 <_lseek_r>:
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	4d07      	ldr	r5, [pc, #28]	; (8003088 <_lseek_r+0x20>)
 800306c:	4604      	mov	r4, r0
 800306e:	4608      	mov	r0, r1
 8003070:	4611      	mov	r1, r2
 8003072:	2200      	movs	r2, #0
 8003074:	602a      	str	r2, [r5, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	f7fd fd08 	bl	8000a8c <_lseek>
 800307c:	1c43      	adds	r3, r0, #1
 800307e:	d102      	bne.n	8003086 <_lseek_r+0x1e>
 8003080:	682b      	ldr	r3, [r5, #0]
 8003082:	b103      	cbz	r3, 8003086 <_lseek_r+0x1e>
 8003084:	6023      	str	r3, [r4, #0]
 8003086:	bd38      	pop	{r3, r4, r5, pc}
 8003088:	20000264 	.word	0x20000264

0800308c <_read_r>:
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	4d07      	ldr	r5, [pc, #28]	; (80030ac <_read_r+0x20>)
 8003090:	4604      	mov	r4, r0
 8003092:	4608      	mov	r0, r1
 8003094:	4611      	mov	r1, r2
 8003096:	2200      	movs	r2, #0
 8003098:	602a      	str	r2, [r5, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	f7fd fc96 	bl	80009cc <_read>
 80030a0:	1c43      	adds	r3, r0, #1
 80030a2:	d102      	bne.n	80030aa <_read_r+0x1e>
 80030a4:	682b      	ldr	r3, [r5, #0]
 80030a6:	b103      	cbz	r3, 80030aa <_read_r+0x1e>
 80030a8:	6023      	str	r3, [r4, #0]
 80030aa:	bd38      	pop	{r3, r4, r5, pc}
 80030ac:	20000264 	.word	0x20000264

080030b0 <_write_r>:
 80030b0:	b538      	push	{r3, r4, r5, lr}
 80030b2:	4d07      	ldr	r5, [pc, #28]	; (80030d0 <_write_r+0x20>)
 80030b4:	4604      	mov	r4, r0
 80030b6:	4608      	mov	r0, r1
 80030b8:	4611      	mov	r1, r2
 80030ba:	2200      	movs	r2, #0
 80030bc:	602a      	str	r2, [r5, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	f7fd fca1 	bl	8000a06 <_write>
 80030c4:	1c43      	adds	r3, r0, #1
 80030c6:	d102      	bne.n	80030ce <_write_r+0x1e>
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	b103      	cbz	r3, 80030ce <_write_r+0x1e>
 80030cc:	6023      	str	r3, [r4, #0]
 80030ce:	bd38      	pop	{r3, r4, r5, pc}
 80030d0:	20000264 	.word	0x20000264

080030d4 <__errno>:
 80030d4:	4b01      	ldr	r3, [pc, #4]	; (80030dc <__errno+0x8>)
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000064 	.word	0x20000064

080030e0 <__libc_init_array>:
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	4d0d      	ldr	r5, [pc, #52]	; (8003118 <__libc_init_array+0x38>)
 80030e4:	4c0d      	ldr	r4, [pc, #52]	; (800311c <__libc_init_array+0x3c>)
 80030e6:	1b64      	subs	r4, r4, r5
 80030e8:	10a4      	asrs	r4, r4, #2
 80030ea:	2600      	movs	r6, #0
 80030ec:	42a6      	cmp	r6, r4
 80030ee:	d109      	bne.n	8003104 <__libc_init_array+0x24>
 80030f0:	4d0b      	ldr	r5, [pc, #44]	; (8003120 <__libc_init_array+0x40>)
 80030f2:	4c0c      	ldr	r4, [pc, #48]	; (8003124 <__libc_init_array+0x44>)
 80030f4:	f000 fd28 	bl	8003b48 <_init>
 80030f8:	1b64      	subs	r4, r4, r5
 80030fa:	10a4      	asrs	r4, r4, #2
 80030fc:	2600      	movs	r6, #0
 80030fe:	42a6      	cmp	r6, r4
 8003100:	d105      	bne.n	800310e <__libc_init_array+0x2e>
 8003102:	bd70      	pop	{r4, r5, r6, pc}
 8003104:	f855 3b04 	ldr.w	r3, [r5], #4
 8003108:	4798      	blx	r3
 800310a:	3601      	adds	r6, #1
 800310c:	e7ee      	b.n	80030ec <__libc_init_array+0xc>
 800310e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003112:	4798      	blx	r3
 8003114:	3601      	adds	r6, #1
 8003116:	e7f2      	b.n	80030fe <__libc_init_array+0x1e>
 8003118:	08003bf0 	.word	0x08003bf0
 800311c:	08003bf0 	.word	0x08003bf0
 8003120:	08003bf0 	.word	0x08003bf0
 8003124:	08003bf4 	.word	0x08003bf4

08003128 <__retarget_lock_acquire_recursive>:
 8003128:	4770      	bx	lr

0800312a <__retarget_lock_release_recursive>:
 800312a:	4770      	bx	lr

0800312c <_free_r>:
 800312c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800312e:	2900      	cmp	r1, #0
 8003130:	d044      	beq.n	80031bc <_free_r+0x90>
 8003132:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003136:	9001      	str	r0, [sp, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	f1a1 0404 	sub.w	r4, r1, #4
 800313e:	bfb8      	it	lt
 8003140:	18e4      	addlt	r4, r4, r3
 8003142:	f000 f8df 	bl	8003304 <__malloc_lock>
 8003146:	4a1e      	ldr	r2, [pc, #120]	; (80031c0 <_free_r+0x94>)
 8003148:	9801      	ldr	r0, [sp, #4]
 800314a:	6813      	ldr	r3, [r2, #0]
 800314c:	b933      	cbnz	r3, 800315c <_free_r+0x30>
 800314e:	6063      	str	r3, [r4, #4]
 8003150:	6014      	str	r4, [r2, #0]
 8003152:	b003      	add	sp, #12
 8003154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003158:	f000 b8da 	b.w	8003310 <__malloc_unlock>
 800315c:	42a3      	cmp	r3, r4
 800315e:	d908      	bls.n	8003172 <_free_r+0x46>
 8003160:	6825      	ldr	r5, [r4, #0]
 8003162:	1961      	adds	r1, r4, r5
 8003164:	428b      	cmp	r3, r1
 8003166:	bf01      	itttt	eq
 8003168:	6819      	ldreq	r1, [r3, #0]
 800316a:	685b      	ldreq	r3, [r3, #4]
 800316c:	1949      	addeq	r1, r1, r5
 800316e:	6021      	streq	r1, [r4, #0]
 8003170:	e7ed      	b.n	800314e <_free_r+0x22>
 8003172:	461a      	mov	r2, r3
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	b10b      	cbz	r3, 800317c <_free_r+0x50>
 8003178:	42a3      	cmp	r3, r4
 800317a:	d9fa      	bls.n	8003172 <_free_r+0x46>
 800317c:	6811      	ldr	r1, [r2, #0]
 800317e:	1855      	adds	r5, r2, r1
 8003180:	42a5      	cmp	r5, r4
 8003182:	d10b      	bne.n	800319c <_free_r+0x70>
 8003184:	6824      	ldr	r4, [r4, #0]
 8003186:	4421      	add	r1, r4
 8003188:	1854      	adds	r4, r2, r1
 800318a:	42a3      	cmp	r3, r4
 800318c:	6011      	str	r1, [r2, #0]
 800318e:	d1e0      	bne.n	8003152 <_free_r+0x26>
 8003190:	681c      	ldr	r4, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	6053      	str	r3, [r2, #4]
 8003196:	440c      	add	r4, r1
 8003198:	6014      	str	r4, [r2, #0]
 800319a:	e7da      	b.n	8003152 <_free_r+0x26>
 800319c:	d902      	bls.n	80031a4 <_free_r+0x78>
 800319e:	230c      	movs	r3, #12
 80031a0:	6003      	str	r3, [r0, #0]
 80031a2:	e7d6      	b.n	8003152 <_free_r+0x26>
 80031a4:	6825      	ldr	r5, [r4, #0]
 80031a6:	1961      	adds	r1, r4, r5
 80031a8:	428b      	cmp	r3, r1
 80031aa:	bf04      	itt	eq
 80031ac:	6819      	ldreq	r1, [r3, #0]
 80031ae:	685b      	ldreq	r3, [r3, #4]
 80031b0:	6063      	str	r3, [r4, #4]
 80031b2:	bf04      	itt	eq
 80031b4:	1949      	addeq	r1, r1, r5
 80031b6:	6021      	streq	r1, [r4, #0]
 80031b8:	6054      	str	r4, [r2, #4]
 80031ba:	e7ca      	b.n	8003152 <_free_r+0x26>
 80031bc:	b003      	add	sp, #12
 80031be:	bd30      	pop	{r4, r5, pc}
 80031c0:	2000026c 	.word	0x2000026c

080031c4 <sbrk_aligned>:
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	4e0e      	ldr	r6, [pc, #56]	; (8003200 <sbrk_aligned+0x3c>)
 80031c8:	460c      	mov	r4, r1
 80031ca:	6831      	ldr	r1, [r6, #0]
 80031cc:	4605      	mov	r5, r0
 80031ce:	b911      	cbnz	r1, 80031d6 <sbrk_aligned+0x12>
 80031d0:	f000 fcaa 	bl	8003b28 <_sbrk_r>
 80031d4:	6030      	str	r0, [r6, #0]
 80031d6:	4621      	mov	r1, r4
 80031d8:	4628      	mov	r0, r5
 80031da:	f000 fca5 	bl	8003b28 <_sbrk_r>
 80031de:	1c43      	adds	r3, r0, #1
 80031e0:	d00a      	beq.n	80031f8 <sbrk_aligned+0x34>
 80031e2:	1cc4      	adds	r4, r0, #3
 80031e4:	f024 0403 	bic.w	r4, r4, #3
 80031e8:	42a0      	cmp	r0, r4
 80031ea:	d007      	beq.n	80031fc <sbrk_aligned+0x38>
 80031ec:	1a21      	subs	r1, r4, r0
 80031ee:	4628      	mov	r0, r5
 80031f0:	f000 fc9a 	bl	8003b28 <_sbrk_r>
 80031f4:	3001      	adds	r0, #1
 80031f6:	d101      	bne.n	80031fc <sbrk_aligned+0x38>
 80031f8:	f04f 34ff 	mov.w	r4, #4294967295
 80031fc:	4620      	mov	r0, r4
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
 8003200:	20000270 	.word	0x20000270

08003204 <_malloc_r>:
 8003204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003208:	1ccd      	adds	r5, r1, #3
 800320a:	f025 0503 	bic.w	r5, r5, #3
 800320e:	3508      	adds	r5, #8
 8003210:	2d0c      	cmp	r5, #12
 8003212:	bf38      	it	cc
 8003214:	250c      	movcc	r5, #12
 8003216:	2d00      	cmp	r5, #0
 8003218:	4607      	mov	r7, r0
 800321a:	db01      	blt.n	8003220 <_malloc_r+0x1c>
 800321c:	42a9      	cmp	r1, r5
 800321e:	d905      	bls.n	800322c <_malloc_r+0x28>
 8003220:	230c      	movs	r3, #12
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	2600      	movs	r6, #0
 8003226:	4630      	mov	r0, r6
 8003228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800322c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003300 <_malloc_r+0xfc>
 8003230:	f000 f868 	bl	8003304 <__malloc_lock>
 8003234:	f8d8 3000 	ldr.w	r3, [r8]
 8003238:	461c      	mov	r4, r3
 800323a:	bb5c      	cbnz	r4, 8003294 <_malloc_r+0x90>
 800323c:	4629      	mov	r1, r5
 800323e:	4638      	mov	r0, r7
 8003240:	f7ff ffc0 	bl	80031c4 <sbrk_aligned>
 8003244:	1c43      	adds	r3, r0, #1
 8003246:	4604      	mov	r4, r0
 8003248:	d155      	bne.n	80032f6 <_malloc_r+0xf2>
 800324a:	f8d8 4000 	ldr.w	r4, [r8]
 800324e:	4626      	mov	r6, r4
 8003250:	2e00      	cmp	r6, #0
 8003252:	d145      	bne.n	80032e0 <_malloc_r+0xdc>
 8003254:	2c00      	cmp	r4, #0
 8003256:	d048      	beq.n	80032ea <_malloc_r+0xe6>
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	4631      	mov	r1, r6
 800325c:	4638      	mov	r0, r7
 800325e:	eb04 0903 	add.w	r9, r4, r3
 8003262:	f000 fc61 	bl	8003b28 <_sbrk_r>
 8003266:	4581      	cmp	r9, r0
 8003268:	d13f      	bne.n	80032ea <_malloc_r+0xe6>
 800326a:	6821      	ldr	r1, [r4, #0]
 800326c:	1a6d      	subs	r5, r5, r1
 800326e:	4629      	mov	r1, r5
 8003270:	4638      	mov	r0, r7
 8003272:	f7ff ffa7 	bl	80031c4 <sbrk_aligned>
 8003276:	3001      	adds	r0, #1
 8003278:	d037      	beq.n	80032ea <_malloc_r+0xe6>
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	442b      	add	r3, r5
 800327e:	6023      	str	r3, [r4, #0]
 8003280:	f8d8 3000 	ldr.w	r3, [r8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d038      	beq.n	80032fa <_malloc_r+0xf6>
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	42a2      	cmp	r2, r4
 800328c:	d12b      	bne.n	80032e6 <_malloc_r+0xe2>
 800328e:	2200      	movs	r2, #0
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	e00f      	b.n	80032b4 <_malloc_r+0xb0>
 8003294:	6822      	ldr	r2, [r4, #0]
 8003296:	1b52      	subs	r2, r2, r5
 8003298:	d41f      	bmi.n	80032da <_malloc_r+0xd6>
 800329a:	2a0b      	cmp	r2, #11
 800329c:	d917      	bls.n	80032ce <_malloc_r+0xca>
 800329e:	1961      	adds	r1, r4, r5
 80032a0:	42a3      	cmp	r3, r4
 80032a2:	6025      	str	r5, [r4, #0]
 80032a4:	bf18      	it	ne
 80032a6:	6059      	strne	r1, [r3, #4]
 80032a8:	6863      	ldr	r3, [r4, #4]
 80032aa:	bf08      	it	eq
 80032ac:	f8c8 1000 	streq.w	r1, [r8]
 80032b0:	5162      	str	r2, [r4, r5]
 80032b2:	604b      	str	r3, [r1, #4]
 80032b4:	4638      	mov	r0, r7
 80032b6:	f104 060b 	add.w	r6, r4, #11
 80032ba:	f000 f829 	bl	8003310 <__malloc_unlock>
 80032be:	f026 0607 	bic.w	r6, r6, #7
 80032c2:	1d23      	adds	r3, r4, #4
 80032c4:	1af2      	subs	r2, r6, r3
 80032c6:	d0ae      	beq.n	8003226 <_malloc_r+0x22>
 80032c8:	1b9b      	subs	r3, r3, r6
 80032ca:	50a3      	str	r3, [r4, r2]
 80032cc:	e7ab      	b.n	8003226 <_malloc_r+0x22>
 80032ce:	42a3      	cmp	r3, r4
 80032d0:	6862      	ldr	r2, [r4, #4]
 80032d2:	d1dd      	bne.n	8003290 <_malloc_r+0x8c>
 80032d4:	f8c8 2000 	str.w	r2, [r8]
 80032d8:	e7ec      	b.n	80032b4 <_malloc_r+0xb0>
 80032da:	4623      	mov	r3, r4
 80032dc:	6864      	ldr	r4, [r4, #4]
 80032de:	e7ac      	b.n	800323a <_malloc_r+0x36>
 80032e0:	4634      	mov	r4, r6
 80032e2:	6876      	ldr	r6, [r6, #4]
 80032e4:	e7b4      	b.n	8003250 <_malloc_r+0x4c>
 80032e6:	4613      	mov	r3, r2
 80032e8:	e7cc      	b.n	8003284 <_malloc_r+0x80>
 80032ea:	230c      	movs	r3, #12
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	4638      	mov	r0, r7
 80032f0:	f000 f80e 	bl	8003310 <__malloc_unlock>
 80032f4:	e797      	b.n	8003226 <_malloc_r+0x22>
 80032f6:	6025      	str	r5, [r4, #0]
 80032f8:	e7dc      	b.n	80032b4 <_malloc_r+0xb0>
 80032fa:	605b      	str	r3, [r3, #4]
 80032fc:	deff      	udf	#255	; 0xff
 80032fe:	bf00      	nop
 8003300:	2000026c 	.word	0x2000026c

08003304 <__malloc_lock>:
 8003304:	4801      	ldr	r0, [pc, #4]	; (800330c <__malloc_lock+0x8>)
 8003306:	f7ff bf0f 	b.w	8003128 <__retarget_lock_acquire_recursive>
 800330a:	bf00      	nop
 800330c:	20000268 	.word	0x20000268

08003310 <__malloc_unlock>:
 8003310:	4801      	ldr	r0, [pc, #4]	; (8003318 <__malloc_unlock+0x8>)
 8003312:	f7ff bf0a 	b.w	800312a <__retarget_lock_release_recursive>
 8003316:	bf00      	nop
 8003318:	20000268 	.word	0x20000268

0800331c <__sfputc_r>:
 800331c:	6893      	ldr	r3, [r2, #8]
 800331e:	3b01      	subs	r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	b410      	push	{r4}
 8003324:	6093      	str	r3, [r2, #8]
 8003326:	da08      	bge.n	800333a <__sfputc_r+0x1e>
 8003328:	6994      	ldr	r4, [r2, #24]
 800332a:	42a3      	cmp	r3, r4
 800332c:	db01      	blt.n	8003332 <__sfputc_r+0x16>
 800332e:	290a      	cmp	r1, #10
 8003330:	d103      	bne.n	800333a <__sfputc_r+0x1e>
 8003332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003336:	f7ff bdea 	b.w	8002f0e <__swbuf_r>
 800333a:	6813      	ldr	r3, [r2, #0]
 800333c:	1c58      	adds	r0, r3, #1
 800333e:	6010      	str	r0, [r2, #0]
 8003340:	7019      	strb	r1, [r3, #0]
 8003342:	4608      	mov	r0, r1
 8003344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003348:	4770      	bx	lr

0800334a <__sfputs_r>:
 800334a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334c:	4606      	mov	r6, r0
 800334e:	460f      	mov	r7, r1
 8003350:	4614      	mov	r4, r2
 8003352:	18d5      	adds	r5, r2, r3
 8003354:	42ac      	cmp	r4, r5
 8003356:	d101      	bne.n	800335c <__sfputs_r+0x12>
 8003358:	2000      	movs	r0, #0
 800335a:	e007      	b.n	800336c <__sfputs_r+0x22>
 800335c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003360:	463a      	mov	r2, r7
 8003362:	4630      	mov	r0, r6
 8003364:	f7ff ffda 	bl	800331c <__sfputc_r>
 8003368:	1c43      	adds	r3, r0, #1
 800336a:	d1f3      	bne.n	8003354 <__sfputs_r+0xa>
 800336c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003370 <_vfiprintf_r>:
 8003370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003374:	460d      	mov	r5, r1
 8003376:	b09d      	sub	sp, #116	; 0x74
 8003378:	4614      	mov	r4, r2
 800337a:	4698      	mov	r8, r3
 800337c:	4606      	mov	r6, r0
 800337e:	b118      	cbz	r0, 8003388 <_vfiprintf_r+0x18>
 8003380:	6a03      	ldr	r3, [r0, #32]
 8003382:	b90b      	cbnz	r3, 8003388 <_vfiprintf_r+0x18>
 8003384:	f7ff fcdc 	bl	8002d40 <__sinit>
 8003388:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800338a:	07d9      	lsls	r1, r3, #31
 800338c:	d405      	bmi.n	800339a <_vfiprintf_r+0x2a>
 800338e:	89ab      	ldrh	r3, [r5, #12]
 8003390:	059a      	lsls	r2, r3, #22
 8003392:	d402      	bmi.n	800339a <_vfiprintf_r+0x2a>
 8003394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003396:	f7ff fec7 	bl	8003128 <__retarget_lock_acquire_recursive>
 800339a:	89ab      	ldrh	r3, [r5, #12]
 800339c:	071b      	lsls	r3, r3, #28
 800339e:	d501      	bpl.n	80033a4 <_vfiprintf_r+0x34>
 80033a0:	692b      	ldr	r3, [r5, #16]
 80033a2:	b99b      	cbnz	r3, 80033cc <_vfiprintf_r+0x5c>
 80033a4:	4629      	mov	r1, r5
 80033a6:	4630      	mov	r0, r6
 80033a8:	f7ff fdee 	bl	8002f88 <__swsetup_r>
 80033ac:	b170      	cbz	r0, 80033cc <_vfiprintf_r+0x5c>
 80033ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033b0:	07dc      	lsls	r4, r3, #31
 80033b2:	d504      	bpl.n	80033be <_vfiprintf_r+0x4e>
 80033b4:	f04f 30ff 	mov.w	r0, #4294967295
 80033b8:	b01d      	add	sp, #116	; 0x74
 80033ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033be:	89ab      	ldrh	r3, [r5, #12]
 80033c0:	0598      	lsls	r0, r3, #22
 80033c2:	d4f7      	bmi.n	80033b4 <_vfiprintf_r+0x44>
 80033c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033c6:	f7ff feb0 	bl	800312a <__retarget_lock_release_recursive>
 80033ca:	e7f3      	b.n	80033b4 <_vfiprintf_r+0x44>
 80033cc:	2300      	movs	r3, #0
 80033ce:	9309      	str	r3, [sp, #36]	; 0x24
 80033d0:	2320      	movs	r3, #32
 80033d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80033da:	2330      	movs	r3, #48	; 0x30
 80033dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003590 <_vfiprintf_r+0x220>
 80033e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033e4:	f04f 0901 	mov.w	r9, #1
 80033e8:	4623      	mov	r3, r4
 80033ea:	469a      	mov	sl, r3
 80033ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033f0:	b10a      	cbz	r2, 80033f6 <_vfiprintf_r+0x86>
 80033f2:	2a25      	cmp	r2, #37	; 0x25
 80033f4:	d1f9      	bne.n	80033ea <_vfiprintf_r+0x7a>
 80033f6:	ebba 0b04 	subs.w	fp, sl, r4
 80033fa:	d00b      	beq.n	8003414 <_vfiprintf_r+0xa4>
 80033fc:	465b      	mov	r3, fp
 80033fe:	4622      	mov	r2, r4
 8003400:	4629      	mov	r1, r5
 8003402:	4630      	mov	r0, r6
 8003404:	f7ff ffa1 	bl	800334a <__sfputs_r>
 8003408:	3001      	adds	r0, #1
 800340a:	f000 80a9 	beq.w	8003560 <_vfiprintf_r+0x1f0>
 800340e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003410:	445a      	add	r2, fp
 8003412:	9209      	str	r2, [sp, #36]	; 0x24
 8003414:	f89a 3000 	ldrb.w	r3, [sl]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80a1 	beq.w	8003560 <_vfiprintf_r+0x1f0>
 800341e:	2300      	movs	r3, #0
 8003420:	f04f 32ff 	mov.w	r2, #4294967295
 8003424:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003428:	f10a 0a01 	add.w	sl, sl, #1
 800342c:	9304      	str	r3, [sp, #16]
 800342e:	9307      	str	r3, [sp, #28]
 8003430:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003434:	931a      	str	r3, [sp, #104]	; 0x68
 8003436:	4654      	mov	r4, sl
 8003438:	2205      	movs	r2, #5
 800343a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800343e:	4854      	ldr	r0, [pc, #336]	; (8003590 <_vfiprintf_r+0x220>)
 8003440:	f7fc fee6 	bl	8000210 <memchr>
 8003444:	9a04      	ldr	r2, [sp, #16]
 8003446:	b9d8      	cbnz	r0, 8003480 <_vfiprintf_r+0x110>
 8003448:	06d1      	lsls	r1, r2, #27
 800344a:	bf44      	itt	mi
 800344c:	2320      	movmi	r3, #32
 800344e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003452:	0713      	lsls	r3, r2, #28
 8003454:	bf44      	itt	mi
 8003456:	232b      	movmi	r3, #43	; 0x2b
 8003458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800345c:	f89a 3000 	ldrb.w	r3, [sl]
 8003460:	2b2a      	cmp	r3, #42	; 0x2a
 8003462:	d015      	beq.n	8003490 <_vfiprintf_r+0x120>
 8003464:	9a07      	ldr	r2, [sp, #28]
 8003466:	4654      	mov	r4, sl
 8003468:	2000      	movs	r0, #0
 800346a:	f04f 0c0a 	mov.w	ip, #10
 800346e:	4621      	mov	r1, r4
 8003470:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003474:	3b30      	subs	r3, #48	; 0x30
 8003476:	2b09      	cmp	r3, #9
 8003478:	d94d      	bls.n	8003516 <_vfiprintf_r+0x1a6>
 800347a:	b1b0      	cbz	r0, 80034aa <_vfiprintf_r+0x13a>
 800347c:	9207      	str	r2, [sp, #28]
 800347e:	e014      	b.n	80034aa <_vfiprintf_r+0x13a>
 8003480:	eba0 0308 	sub.w	r3, r0, r8
 8003484:	fa09 f303 	lsl.w	r3, r9, r3
 8003488:	4313      	orrs	r3, r2
 800348a:	9304      	str	r3, [sp, #16]
 800348c:	46a2      	mov	sl, r4
 800348e:	e7d2      	b.n	8003436 <_vfiprintf_r+0xc6>
 8003490:	9b03      	ldr	r3, [sp, #12]
 8003492:	1d19      	adds	r1, r3, #4
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	9103      	str	r1, [sp, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	bfbb      	ittet	lt
 800349c:	425b      	neglt	r3, r3
 800349e:	f042 0202 	orrlt.w	r2, r2, #2
 80034a2:	9307      	strge	r3, [sp, #28]
 80034a4:	9307      	strlt	r3, [sp, #28]
 80034a6:	bfb8      	it	lt
 80034a8:	9204      	strlt	r2, [sp, #16]
 80034aa:	7823      	ldrb	r3, [r4, #0]
 80034ac:	2b2e      	cmp	r3, #46	; 0x2e
 80034ae:	d10c      	bne.n	80034ca <_vfiprintf_r+0x15a>
 80034b0:	7863      	ldrb	r3, [r4, #1]
 80034b2:	2b2a      	cmp	r3, #42	; 0x2a
 80034b4:	d134      	bne.n	8003520 <_vfiprintf_r+0x1b0>
 80034b6:	9b03      	ldr	r3, [sp, #12]
 80034b8:	1d1a      	adds	r2, r3, #4
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	9203      	str	r2, [sp, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bfb8      	it	lt
 80034c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80034c6:	3402      	adds	r4, #2
 80034c8:	9305      	str	r3, [sp, #20]
 80034ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80035a0 <_vfiprintf_r+0x230>
 80034ce:	7821      	ldrb	r1, [r4, #0]
 80034d0:	2203      	movs	r2, #3
 80034d2:	4650      	mov	r0, sl
 80034d4:	f7fc fe9c 	bl	8000210 <memchr>
 80034d8:	b138      	cbz	r0, 80034ea <_vfiprintf_r+0x17a>
 80034da:	9b04      	ldr	r3, [sp, #16]
 80034dc:	eba0 000a 	sub.w	r0, r0, sl
 80034e0:	2240      	movs	r2, #64	; 0x40
 80034e2:	4082      	lsls	r2, r0
 80034e4:	4313      	orrs	r3, r2
 80034e6:	3401      	adds	r4, #1
 80034e8:	9304      	str	r3, [sp, #16]
 80034ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034ee:	4829      	ldr	r0, [pc, #164]	; (8003594 <_vfiprintf_r+0x224>)
 80034f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034f4:	2206      	movs	r2, #6
 80034f6:	f7fc fe8b 	bl	8000210 <memchr>
 80034fa:	2800      	cmp	r0, #0
 80034fc:	d03f      	beq.n	800357e <_vfiprintf_r+0x20e>
 80034fe:	4b26      	ldr	r3, [pc, #152]	; (8003598 <_vfiprintf_r+0x228>)
 8003500:	bb1b      	cbnz	r3, 800354a <_vfiprintf_r+0x1da>
 8003502:	9b03      	ldr	r3, [sp, #12]
 8003504:	3307      	adds	r3, #7
 8003506:	f023 0307 	bic.w	r3, r3, #7
 800350a:	3308      	adds	r3, #8
 800350c:	9303      	str	r3, [sp, #12]
 800350e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003510:	443b      	add	r3, r7
 8003512:	9309      	str	r3, [sp, #36]	; 0x24
 8003514:	e768      	b.n	80033e8 <_vfiprintf_r+0x78>
 8003516:	fb0c 3202 	mla	r2, ip, r2, r3
 800351a:	460c      	mov	r4, r1
 800351c:	2001      	movs	r0, #1
 800351e:	e7a6      	b.n	800346e <_vfiprintf_r+0xfe>
 8003520:	2300      	movs	r3, #0
 8003522:	3401      	adds	r4, #1
 8003524:	9305      	str	r3, [sp, #20]
 8003526:	4619      	mov	r1, r3
 8003528:	f04f 0c0a 	mov.w	ip, #10
 800352c:	4620      	mov	r0, r4
 800352e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003532:	3a30      	subs	r2, #48	; 0x30
 8003534:	2a09      	cmp	r2, #9
 8003536:	d903      	bls.n	8003540 <_vfiprintf_r+0x1d0>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0c6      	beq.n	80034ca <_vfiprintf_r+0x15a>
 800353c:	9105      	str	r1, [sp, #20]
 800353e:	e7c4      	b.n	80034ca <_vfiprintf_r+0x15a>
 8003540:	fb0c 2101 	mla	r1, ip, r1, r2
 8003544:	4604      	mov	r4, r0
 8003546:	2301      	movs	r3, #1
 8003548:	e7f0      	b.n	800352c <_vfiprintf_r+0x1bc>
 800354a:	ab03      	add	r3, sp, #12
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	462a      	mov	r2, r5
 8003550:	4b12      	ldr	r3, [pc, #72]	; (800359c <_vfiprintf_r+0x22c>)
 8003552:	a904      	add	r1, sp, #16
 8003554:	4630      	mov	r0, r6
 8003556:	f3af 8000 	nop.w
 800355a:	4607      	mov	r7, r0
 800355c:	1c78      	adds	r0, r7, #1
 800355e:	d1d6      	bne.n	800350e <_vfiprintf_r+0x19e>
 8003560:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003562:	07d9      	lsls	r1, r3, #31
 8003564:	d405      	bmi.n	8003572 <_vfiprintf_r+0x202>
 8003566:	89ab      	ldrh	r3, [r5, #12]
 8003568:	059a      	lsls	r2, r3, #22
 800356a:	d402      	bmi.n	8003572 <_vfiprintf_r+0x202>
 800356c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800356e:	f7ff fddc 	bl	800312a <__retarget_lock_release_recursive>
 8003572:	89ab      	ldrh	r3, [r5, #12]
 8003574:	065b      	lsls	r3, r3, #25
 8003576:	f53f af1d 	bmi.w	80033b4 <_vfiprintf_r+0x44>
 800357a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800357c:	e71c      	b.n	80033b8 <_vfiprintf_r+0x48>
 800357e:	ab03      	add	r3, sp, #12
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	462a      	mov	r2, r5
 8003584:	4b05      	ldr	r3, [pc, #20]	; (800359c <_vfiprintf_r+0x22c>)
 8003586:	a904      	add	r1, sp, #16
 8003588:	4630      	mov	r0, r6
 800358a:	f000 f879 	bl	8003680 <_printf_i>
 800358e:	e7e4      	b.n	800355a <_vfiprintf_r+0x1ea>
 8003590:	08003bb4 	.word	0x08003bb4
 8003594:	08003bbe 	.word	0x08003bbe
 8003598:	00000000 	.word	0x00000000
 800359c:	0800334b 	.word	0x0800334b
 80035a0:	08003bba 	.word	0x08003bba

080035a4 <_printf_common>:
 80035a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035a8:	4616      	mov	r6, r2
 80035aa:	4699      	mov	r9, r3
 80035ac:	688a      	ldr	r2, [r1, #8]
 80035ae:	690b      	ldr	r3, [r1, #16]
 80035b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035b4:	4293      	cmp	r3, r2
 80035b6:	bfb8      	it	lt
 80035b8:	4613      	movlt	r3, r2
 80035ba:	6033      	str	r3, [r6, #0]
 80035bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035c0:	4607      	mov	r7, r0
 80035c2:	460c      	mov	r4, r1
 80035c4:	b10a      	cbz	r2, 80035ca <_printf_common+0x26>
 80035c6:	3301      	adds	r3, #1
 80035c8:	6033      	str	r3, [r6, #0]
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	0699      	lsls	r1, r3, #26
 80035ce:	bf42      	ittt	mi
 80035d0:	6833      	ldrmi	r3, [r6, #0]
 80035d2:	3302      	addmi	r3, #2
 80035d4:	6033      	strmi	r3, [r6, #0]
 80035d6:	6825      	ldr	r5, [r4, #0]
 80035d8:	f015 0506 	ands.w	r5, r5, #6
 80035dc:	d106      	bne.n	80035ec <_printf_common+0x48>
 80035de:	f104 0a19 	add.w	sl, r4, #25
 80035e2:	68e3      	ldr	r3, [r4, #12]
 80035e4:	6832      	ldr	r2, [r6, #0]
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	42ab      	cmp	r3, r5
 80035ea:	dc26      	bgt.n	800363a <_printf_common+0x96>
 80035ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035f0:	1e13      	subs	r3, r2, #0
 80035f2:	6822      	ldr	r2, [r4, #0]
 80035f4:	bf18      	it	ne
 80035f6:	2301      	movne	r3, #1
 80035f8:	0692      	lsls	r2, r2, #26
 80035fa:	d42b      	bmi.n	8003654 <_printf_common+0xb0>
 80035fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003600:	4649      	mov	r1, r9
 8003602:	4638      	mov	r0, r7
 8003604:	47c0      	blx	r8
 8003606:	3001      	adds	r0, #1
 8003608:	d01e      	beq.n	8003648 <_printf_common+0xa4>
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	6922      	ldr	r2, [r4, #16]
 800360e:	f003 0306 	and.w	r3, r3, #6
 8003612:	2b04      	cmp	r3, #4
 8003614:	bf02      	ittt	eq
 8003616:	68e5      	ldreq	r5, [r4, #12]
 8003618:	6833      	ldreq	r3, [r6, #0]
 800361a:	1aed      	subeq	r5, r5, r3
 800361c:	68a3      	ldr	r3, [r4, #8]
 800361e:	bf0c      	ite	eq
 8003620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003624:	2500      	movne	r5, #0
 8003626:	4293      	cmp	r3, r2
 8003628:	bfc4      	itt	gt
 800362a:	1a9b      	subgt	r3, r3, r2
 800362c:	18ed      	addgt	r5, r5, r3
 800362e:	2600      	movs	r6, #0
 8003630:	341a      	adds	r4, #26
 8003632:	42b5      	cmp	r5, r6
 8003634:	d11a      	bne.n	800366c <_printf_common+0xc8>
 8003636:	2000      	movs	r0, #0
 8003638:	e008      	b.n	800364c <_printf_common+0xa8>
 800363a:	2301      	movs	r3, #1
 800363c:	4652      	mov	r2, sl
 800363e:	4649      	mov	r1, r9
 8003640:	4638      	mov	r0, r7
 8003642:	47c0      	blx	r8
 8003644:	3001      	adds	r0, #1
 8003646:	d103      	bne.n	8003650 <_printf_common+0xac>
 8003648:	f04f 30ff 	mov.w	r0, #4294967295
 800364c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003650:	3501      	adds	r5, #1
 8003652:	e7c6      	b.n	80035e2 <_printf_common+0x3e>
 8003654:	18e1      	adds	r1, r4, r3
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	2030      	movs	r0, #48	; 0x30
 800365a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800365e:	4422      	add	r2, r4
 8003660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003668:	3302      	adds	r3, #2
 800366a:	e7c7      	b.n	80035fc <_printf_common+0x58>
 800366c:	2301      	movs	r3, #1
 800366e:	4622      	mov	r2, r4
 8003670:	4649      	mov	r1, r9
 8003672:	4638      	mov	r0, r7
 8003674:	47c0      	blx	r8
 8003676:	3001      	adds	r0, #1
 8003678:	d0e6      	beq.n	8003648 <_printf_common+0xa4>
 800367a:	3601      	adds	r6, #1
 800367c:	e7d9      	b.n	8003632 <_printf_common+0x8e>
	...

08003680 <_printf_i>:
 8003680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003684:	7e0f      	ldrb	r7, [r1, #24]
 8003686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003688:	2f78      	cmp	r7, #120	; 0x78
 800368a:	4691      	mov	r9, r2
 800368c:	4680      	mov	r8, r0
 800368e:	460c      	mov	r4, r1
 8003690:	469a      	mov	sl, r3
 8003692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003696:	d807      	bhi.n	80036a8 <_printf_i+0x28>
 8003698:	2f62      	cmp	r7, #98	; 0x62
 800369a:	d80a      	bhi.n	80036b2 <_printf_i+0x32>
 800369c:	2f00      	cmp	r7, #0
 800369e:	f000 80d4 	beq.w	800384a <_printf_i+0x1ca>
 80036a2:	2f58      	cmp	r7, #88	; 0x58
 80036a4:	f000 80c0 	beq.w	8003828 <_printf_i+0x1a8>
 80036a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036b0:	e03a      	b.n	8003728 <_printf_i+0xa8>
 80036b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036b6:	2b15      	cmp	r3, #21
 80036b8:	d8f6      	bhi.n	80036a8 <_printf_i+0x28>
 80036ba:	a101      	add	r1, pc, #4	; (adr r1, 80036c0 <_printf_i+0x40>)
 80036bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036c0:	08003719 	.word	0x08003719
 80036c4:	0800372d 	.word	0x0800372d
 80036c8:	080036a9 	.word	0x080036a9
 80036cc:	080036a9 	.word	0x080036a9
 80036d0:	080036a9 	.word	0x080036a9
 80036d4:	080036a9 	.word	0x080036a9
 80036d8:	0800372d 	.word	0x0800372d
 80036dc:	080036a9 	.word	0x080036a9
 80036e0:	080036a9 	.word	0x080036a9
 80036e4:	080036a9 	.word	0x080036a9
 80036e8:	080036a9 	.word	0x080036a9
 80036ec:	08003831 	.word	0x08003831
 80036f0:	08003759 	.word	0x08003759
 80036f4:	080037eb 	.word	0x080037eb
 80036f8:	080036a9 	.word	0x080036a9
 80036fc:	080036a9 	.word	0x080036a9
 8003700:	08003853 	.word	0x08003853
 8003704:	080036a9 	.word	0x080036a9
 8003708:	08003759 	.word	0x08003759
 800370c:	080036a9 	.word	0x080036a9
 8003710:	080036a9 	.word	0x080036a9
 8003714:	080037f3 	.word	0x080037f3
 8003718:	682b      	ldr	r3, [r5, #0]
 800371a:	1d1a      	adds	r2, r3, #4
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	602a      	str	r2, [r5, #0]
 8003720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003728:	2301      	movs	r3, #1
 800372a:	e09f      	b.n	800386c <_printf_i+0x1ec>
 800372c:	6820      	ldr	r0, [r4, #0]
 800372e:	682b      	ldr	r3, [r5, #0]
 8003730:	0607      	lsls	r7, r0, #24
 8003732:	f103 0104 	add.w	r1, r3, #4
 8003736:	6029      	str	r1, [r5, #0]
 8003738:	d501      	bpl.n	800373e <_printf_i+0xbe>
 800373a:	681e      	ldr	r6, [r3, #0]
 800373c:	e003      	b.n	8003746 <_printf_i+0xc6>
 800373e:	0646      	lsls	r6, r0, #25
 8003740:	d5fb      	bpl.n	800373a <_printf_i+0xba>
 8003742:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003746:	2e00      	cmp	r6, #0
 8003748:	da03      	bge.n	8003752 <_printf_i+0xd2>
 800374a:	232d      	movs	r3, #45	; 0x2d
 800374c:	4276      	negs	r6, r6
 800374e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003752:	485a      	ldr	r0, [pc, #360]	; (80038bc <_printf_i+0x23c>)
 8003754:	230a      	movs	r3, #10
 8003756:	e012      	b.n	800377e <_printf_i+0xfe>
 8003758:	682b      	ldr	r3, [r5, #0]
 800375a:	6820      	ldr	r0, [r4, #0]
 800375c:	1d19      	adds	r1, r3, #4
 800375e:	6029      	str	r1, [r5, #0]
 8003760:	0605      	lsls	r5, r0, #24
 8003762:	d501      	bpl.n	8003768 <_printf_i+0xe8>
 8003764:	681e      	ldr	r6, [r3, #0]
 8003766:	e002      	b.n	800376e <_printf_i+0xee>
 8003768:	0641      	lsls	r1, r0, #25
 800376a:	d5fb      	bpl.n	8003764 <_printf_i+0xe4>
 800376c:	881e      	ldrh	r6, [r3, #0]
 800376e:	4853      	ldr	r0, [pc, #332]	; (80038bc <_printf_i+0x23c>)
 8003770:	2f6f      	cmp	r7, #111	; 0x6f
 8003772:	bf0c      	ite	eq
 8003774:	2308      	moveq	r3, #8
 8003776:	230a      	movne	r3, #10
 8003778:	2100      	movs	r1, #0
 800377a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800377e:	6865      	ldr	r5, [r4, #4]
 8003780:	60a5      	str	r5, [r4, #8]
 8003782:	2d00      	cmp	r5, #0
 8003784:	bfa2      	ittt	ge
 8003786:	6821      	ldrge	r1, [r4, #0]
 8003788:	f021 0104 	bicge.w	r1, r1, #4
 800378c:	6021      	strge	r1, [r4, #0]
 800378e:	b90e      	cbnz	r6, 8003794 <_printf_i+0x114>
 8003790:	2d00      	cmp	r5, #0
 8003792:	d04b      	beq.n	800382c <_printf_i+0x1ac>
 8003794:	4615      	mov	r5, r2
 8003796:	fbb6 f1f3 	udiv	r1, r6, r3
 800379a:	fb03 6711 	mls	r7, r3, r1, r6
 800379e:	5dc7      	ldrb	r7, [r0, r7]
 80037a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80037a4:	4637      	mov	r7, r6
 80037a6:	42bb      	cmp	r3, r7
 80037a8:	460e      	mov	r6, r1
 80037aa:	d9f4      	bls.n	8003796 <_printf_i+0x116>
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d10b      	bne.n	80037c8 <_printf_i+0x148>
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	07de      	lsls	r6, r3, #31
 80037b4:	d508      	bpl.n	80037c8 <_printf_i+0x148>
 80037b6:	6923      	ldr	r3, [r4, #16]
 80037b8:	6861      	ldr	r1, [r4, #4]
 80037ba:	4299      	cmp	r1, r3
 80037bc:	bfde      	ittt	le
 80037be:	2330      	movle	r3, #48	; 0x30
 80037c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037c8:	1b52      	subs	r2, r2, r5
 80037ca:	6122      	str	r2, [r4, #16]
 80037cc:	f8cd a000 	str.w	sl, [sp]
 80037d0:	464b      	mov	r3, r9
 80037d2:	aa03      	add	r2, sp, #12
 80037d4:	4621      	mov	r1, r4
 80037d6:	4640      	mov	r0, r8
 80037d8:	f7ff fee4 	bl	80035a4 <_printf_common>
 80037dc:	3001      	adds	r0, #1
 80037de:	d14a      	bne.n	8003876 <_printf_i+0x1f6>
 80037e0:	f04f 30ff 	mov.w	r0, #4294967295
 80037e4:	b004      	add	sp, #16
 80037e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	f043 0320 	orr.w	r3, r3, #32
 80037f0:	6023      	str	r3, [r4, #0]
 80037f2:	4833      	ldr	r0, [pc, #204]	; (80038c0 <_printf_i+0x240>)
 80037f4:	2778      	movs	r7, #120	; 0x78
 80037f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	6829      	ldr	r1, [r5, #0]
 80037fe:	061f      	lsls	r7, r3, #24
 8003800:	f851 6b04 	ldr.w	r6, [r1], #4
 8003804:	d402      	bmi.n	800380c <_printf_i+0x18c>
 8003806:	065f      	lsls	r7, r3, #25
 8003808:	bf48      	it	mi
 800380a:	b2b6      	uxthmi	r6, r6
 800380c:	07df      	lsls	r7, r3, #31
 800380e:	bf48      	it	mi
 8003810:	f043 0320 	orrmi.w	r3, r3, #32
 8003814:	6029      	str	r1, [r5, #0]
 8003816:	bf48      	it	mi
 8003818:	6023      	strmi	r3, [r4, #0]
 800381a:	b91e      	cbnz	r6, 8003824 <_printf_i+0x1a4>
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	f023 0320 	bic.w	r3, r3, #32
 8003822:	6023      	str	r3, [r4, #0]
 8003824:	2310      	movs	r3, #16
 8003826:	e7a7      	b.n	8003778 <_printf_i+0xf8>
 8003828:	4824      	ldr	r0, [pc, #144]	; (80038bc <_printf_i+0x23c>)
 800382a:	e7e4      	b.n	80037f6 <_printf_i+0x176>
 800382c:	4615      	mov	r5, r2
 800382e:	e7bd      	b.n	80037ac <_printf_i+0x12c>
 8003830:	682b      	ldr	r3, [r5, #0]
 8003832:	6826      	ldr	r6, [r4, #0]
 8003834:	6961      	ldr	r1, [r4, #20]
 8003836:	1d18      	adds	r0, r3, #4
 8003838:	6028      	str	r0, [r5, #0]
 800383a:	0635      	lsls	r5, r6, #24
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	d501      	bpl.n	8003844 <_printf_i+0x1c4>
 8003840:	6019      	str	r1, [r3, #0]
 8003842:	e002      	b.n	800384a <_printf_i+0x1ca>
 8003844:	0670      	lsls	r0, r6, #25
 8003846:	d5fb      	bpl.n	8003840 <_printf_i+0x1c0>
 8003848:	8019      	strh	r1, [r3, #0]
 800384a:	2300      	movs	r3, #0
 800384c:	6123      	str	r3, [r4, #16]
 800384e:	4615      	mov	r5, r2
 8003850:	e7bc      	b.n	80037cc <_printf_i+0x14c>
 8003852:	682b      	ldr	r3, [r5, #0]
 8003854:	1d1a      	adds	r2, r3, #4
 8003856:	602a      	str	r2, [r5, #0]
 8003858:	681d      	ldr	r5, [r3, #0]
 800385a:	6862      	ldr	r2, [r4, #4]
 800385c:	2100      	movs	r1, #0
 800385e:	4628      	mov	r0, r5
 8003860:	f7fc fcd6 	bl	8000210 <memchr>
 8003864:	b108      	cbz	r0, 800386a <_printf_i+0x1ea>
 8003866:	1b40      	subs	r0, r0, r5
 8003868:	6060      	str	r0, [r4, #4]
 800386a:	6863      	ldr	r3, [r4, #4]
 800386c:	6123      	str	r3, [r4, #16]
 800386e:	2300      	movs	r3, #0
 8003870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003874:	e7aa      	b.n	80037cc <_printf_i+0x14c>
 8003876:	6923      	ldr	r3, [r4, #16]
 8003878:	462a      	mov	r2, r5
 800387a:	4649      	mov	r1, r9
 800387c:	4640      	mov	r0, r8
 800387e:	47d0      	blx	sl
 8003880:	3001      	adds	r0, #1
 8003882:	d0ad      	beq.n	80037e0 <_printf_i+0x160>
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	079b      	lsls	r3, r3, #30
 8003888:	d413      	bmi.n	80038b2 <_printf_i+0x232>
 800388a:	68e0      	ldr	r0, [r4, #12]
 800388c:	9b03      	ldr	r3, [sp, #12]
 800388e:	4298      	cmp	r0, r3
 8003890:	bfb8      	it	lt
 8003892:	4618      	movlt	r0, r3
 8003894:	e7a6      	b.n	80037e4 <_printf_i+0x164>
 8003896:	2301      	movs	r3, #1
 8003898:	4632      	mov	r2, r6
 800389a:	4649      	mov	r1, r9
 800389c:	4640      	mov	r0, r8
 800389e:	47d0      	blx	sl
 80038a0:	3001      	adds	r0, #1
 80038a2:	d09d      	beq.n	80037e0 <_printf_i+0x160>
 80038a4:	3501      	adds	r5, #1
 80038a6:	68e3      	ldr	r3, [r4, #12]
 80038a8:	9903      	ldr	r1, [sp, #12]
 80038aa:	1a5b      	subs	r3, r3, r1
 80038ac:	42ab      	cmp	r3, r5
 80038ae:	dcf2      	bgt.n	8003896 <_printf_i+0x216>
 80038b0:	e7eb      	b.n	800388a <_printf_i+0x20a>
 80038b2:	2500      	movs	r5, #0
 80038b4:	f104 0619 	add.w	r6, r4, #25
 80038b8:	e7f5      	b.n	80038a6 <_printf_i+0x226>
 80038ba:	bf00      	nop
 80038bc:	08003bc5 	.word	0x08003bc5
 80038c0:	08003bd6 	.word	0x08003bd6

080038c4 <__sflush_r>:
 80038c4:	898a      	ldrh	r2, [r1, #12]
 80038c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038ca:	4605      	mov	r5, r0
 80038cc:	0710      	lsls	r0, r2, #28
 80038ce:	460c      	mov	r4, r1
 80038d0:	d458      	bmi.n	8003984 <__sflush_r+0xc0>
 80038d2:	684b      	ldr	r3, [r1, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	dc05      	bgt.n	80038e4 <__sflush_r+0x20>
 80038d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	dc02      	bgt.n	80038e4 <__sflush_r+0x20>
 80038de:	2000      	movs	r0, #0
 80038e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038e6:	2e00      	cmp	r6, #0
 80038e8:	d0f9      	beq.n	80038de <__sflush_r+0x1a>
 80038ea:	2300      	movs	r3, #0
 80038ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80038f0:	682f      	ldr	r7, [r5, #0]
 80038f2:	6a21      	ldr	r1, [r4, #32]
 80038f4:	602b      	str	r3, [r5, #0]
 80038f6:	d032      	beq.n	800395e <__sflush_r+0x9a>
 80038f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80038fa:	89a3      	ldrh	r3, [r4, #12]
 80038fc:	075a      	lsls	r2, r3, #29
 80038fe:	d505      	bpl.n	800390c <__sflush_r+0x48>
 8003900:	6863      	ldr	r3, [r4, #4]
 8003902:	1ac0      	subs	r0, r0, r3
 8003904:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003906:	b10b      	cbz	r3, 800390c <__sflush_r+0x48>
 8003908:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800390a:	1ac0      	subs	r0, r0, r3
 800390c:	2300      	movs	r3, #0
 800390e:	4602      	mov	r2, r0
 8003910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003912:	6a21      	ldr	r1, [r4, #32]
 8003914:	4628      	mov	r0, r5
 8003916:	47b0      	blx	r6
 8003918:	1c43      	adds	r3, r0, #1
 800391a:	89a3      	ldrh	r3, [r4, #12]
 800391c:	d106      	bne.n	800392c <__sflush_r+0x68>
 800391e:	6829      	ldr	r1, [r5, #0]
 8003920:	291d      	cmp	r1, #29
 8003922:	d82b      	bhi.n	800397c <__sflush_r+0xb8>
 8003924:	4a29      	ldr	r2, [pc, #164]	; (80039cc <__sflush_r+0x108>)
 8003926:	410a      	asrs	r2, r1
 8003928:	07d6      	lsls	r6, r2, #31
 800392a:	d427      	bmi.n	800397c <__sflush_r+0xb8>
 800392c:	2200      	movs	r2, #0
 800392e:	6062      	str	r2, [r4, #4]
 8003930:	04d9      	lsls	r1, r3, #19
 8003932:	6922      	ldr	r2, [r4, #16]
 8003934:	6022      	str	r2, [r4, #0]
 8003936:	d504      	bpl.n	8003942 <__sflush_r+0x7e>
 8003938:	1c42      	adds	r2, r0, #1
 800393a:	d101      	bne.n	8003940 <__sflush_r+0x7c>
 800393c:	682b      	ldr	r3, [r5, #0]
 800393e:	b903      	cbnz	r3, 8003942 <__sflush_r+0x7e>
 8003940:	6560      	str	r0, [r4, #84]	; 0x54
 8003942:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003944:	602f      	str	r7, [r5, #0]
 8003946:	2900      	cmp	r1, #0
 8003948:	d0c9      	beq.n	80038de <__sflush_r+0x1a>
 800394a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800394e:	4299      	cmp	r1, r3
 8003950:	d002      	beq.n	8003958 <__sflush_r+0x94>
 8003952:	4628      	mov	r0, r5
 8003954:	f7ff fbea 	bl	800312c <_free_r>
 8003958:	2000      	movs	r0, #0
 800395a:	6360      	str	r0, [r4, #52]	; 0x34
 800395c:	e7c0      	b.n	80038e0 <__sflush_r+0x1c>
 800395e:	2301      	movs	r3, #1
 8003960:	4628      	mov	r0, r5
 8003962:	47b0      	blx	r6
 8003964:	1c41      	adds	r1, r0, #1
 8003966:	d1c8      	bne.n	80038fa <__sflush_r+0x36>
 8003968:	682b      	ldr	r3, [r5, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0c5      	beq.n	80038fa <__sflush_r+0x36>
 800396e:	2b1d      	cmp	r3, #29
 8003970:	d001      	beq.n	8003976 <__sflush_r+0xb2>
 8003972:	2b16      	cmp	r3, #22
 8003974:	d101      	bne.n	800397a <__sflush_r+0xb6>
 8003976:	602f      	str	r7, [r5, #0]
 8003978:	e7b1      	b.n	80038de <__sflush_r+0x1a>
 800397a:	89a3      	ldrh	r3, [r4, #12]
 800397c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003980:	81a3      	strh	r3, [r4, #12]
 8003982:	e7ad      	b.n	80038e0 <__sflush_r+0x1c>
 8003984:	690f      	ldr	r7, [r1, #16]
 8003986:	2f00      	cmp	r7, #0
 8003988:	d0a9      	beq.n	80038de <__sflush_r+0x1a>
 800398a:	0793      	lsls	r3, r2, #30
 800398c:	680e      	ldr	r6, [r1, #0]
 800398e:	bf08      	it	eq
 8003990:	694b      	ldreq	r3, [r1, #20]
 8003992:	600f      	str	r7, [r1, #0]
 8003994:	bf18      	it	ne
 8003996:	2300      	movne	r3, #0
 8003998:	eba6 0807 	sub.w	r8, r6, r7
 800399c:	608b      	str	r3, [r1, #8]
 800399e:	f1b8 0f00 	cmp.w	r8, #0
 80039a2:	dd9c      	ble.n	80038de <__sflush_r+0x1a>
 80039a4:	6a21      	ldr	r1, [r4, #32]
 80039a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80039a8:	4643      	mov	r3, r8
 80039aa:	463a      	mov	r2, r7
 80039ac:	4628      	mov	r0, r5
 80039ae:	47b0      	blx	r6
 80039b0:	2800      	cmp	r0, #0
 80039b2:	dc06      	bgt.n	80039c2 <__sflush_r+0xfe>
 80039b4:	89a3      	ldrh	r3, [r4, #12]
 80039b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ba:	81a3      	strh	r3, [r4, #12]
 80039bc:	f04f 30ff 	mov.w	r0, #4294967295
 80039c0:	e78e      	b.n	80038e0 <__sflush_r+0x1c>
 80039c2:	4407      	add	r7, r0
 80039c4:	eba8 0800 	sub.w	r8, r8, r0
 80039c8:	e7e9      	b.n	800399e <__sflush_r+0xda>
 80039ca:	bf00      	nop
 80039cc:	dfbffffe 	.word	0xdfbffffe

080039d0 <_fflush_r>:
 80039d0:	b538      	push	{r3, r4, r5, lr}
 80039d2:	690b      	ldr	r3, [r1, #16]
 80039d4:	4605      	mov	r5, r0
 80039d6:	460c      	mov	r4, r1
 80039d8:	b913      	cbnz	r3, 80039e0 <_fflush_r+0x10>
 80039da:	2500      	movs	r5, #0
 80039dc:	4628      	mov	r0, r5
 80039de:	bd38      	pop	{r3, r4, r5, pc}
 80039e0:	b118      	cbz	r0, 80039ea <_fflush_r+0x1a>
 80039e2:	6a03      	ldr	r3, [r0, #32]
 80039e4:	b90b      	cbnz	r3, 80039ea <_fflush_r+0x1a>
 80039e6:	f7ff f9ab 	bl	8002d40 <__sinit>
 80039ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f3      	beq.n	80039da <_fflush_r+0xa>
 80039f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80039f4:	07d0      	lsls	r0, r2, #31
 80039f6:	d404      	bmi.n	8003a02 <_fflush_r+0x32>
 80039f8:	0599      	lsls	r1, r3, #22
 80039fa:	d402      	bmi.n	8003a02 <_fflush_r+0x32>
 80039fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039fe:	f7ff fb93 	bl	8003128 <__retarget_lock_acquire_recursive>
 8003a02:	4628      	mov	r0, r5
 8003a04:	4621      	mov	r1, r4
 8003a06:	f7ff ff5d 	bl	80038c4 <__sflush_r>
 8003a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a0c:	07da      	lsls	r2, r3, #31
 8003a0e:	4605      	mov	r5, r0
 8003a10:	d4e4      	bmi.n	80039dc <_fflush_r+0xc>
 8003a12:	89a3      	ldrh	r3, [r4, #12]
 8003a14:	059b      	lsls	r3, r3, #22
 8003a16:	d4e1      	bmi.n	80039dc <_fflush_r+0xc>
 8003a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a1a:	f7ff fb86 	bl	800312a <__retarget_lock_release_recursive>
 8003a1e:	e7dd      	b.n	80039dc <_fflush_r+0xc>

08003a20 <__swhatbuf_r>:
 8003a20:	b570      	push	{r4, r5, r6, lr}
 8003a22:	460c      	mov	r4, r1
 8003a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a28:	2900      	cmp	r1, #0
 8003a2a:	b096      	sub	sp, #88	; 0x58
 8003a2c:	4615      	mov	r5, r2
 8003a2e:	461e      	mov	r6, r3
 8003a30:	da0d      	bge.n	8003a4e <__swhatbuf_r+0x2e>
 8003a32:	89a3      	ldrh	r3, [r4, #12]
 8003a34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003a38:	f04f 0100 	mov.w	r1, #0
 8003a3c:	bf0c      	ite	eq
 8003a3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003a42:	2340      	movne	r3, #64	; 0x40
 8003a44:	2000      	movs	r0, #0
 8003a46:	6031      	str	r1, [r6, #0]
 8003a48:	602b      	str	r3, [r5, #0]
 8003a4a:	b016      	add	sp, #88	; 0x58
 8003a4c:	bd70      	pop	{r4, r5, r6, pc}
 8003a4e:	466a      	mov	r2, sp
 8003a50:	f000 f848 	bl	8003ae4 <_fstat_r>
 8003a54:	2800      	cmp	r0, #0
 8003a56:	dbec      	blt.n	8003a32 <__swhatbuf_r+0x12>
 8003a58:	9901      	ldr	r1, [sp, #4]
 8003a5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003a5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003a62:	4259      	negs	r1, r3
 8003a64:	4159      	adcs	r1, r3
 8003a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a6a:	e7eb      	b.n	8003a44 <__swhatbuf_r+0x24>

08003a6c <__smakebuf_r>:
 8003a6c:	898b      	ldrh	r3, [r1, #12]
 8003a6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a70:	079d      	lsls	r5, r3, #30
 8003a72:	4606      	mov	r6, r0
 8003a74:	460c      	mov	r4, r1
 8003a76:	d507      	bpl.n	8003a88 <__smakebuf_r+0x1c>
 8003a78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a7c:	6023      	str	r3, [r4, #0]
 8003a7e:	6123      	str	r3, [r4, #16]
 8003a80:	2301      	movs	r3, #1
 8003a82:	6163      	str	r3, [r4, #20]
 8003a84:	b002      	add	sp, #8
 8003a86:	bd70      	pop	{r4, r5, r6, pc}
 8003a88:	ab01      	add	r3, sp, #4
 8003a8a:	466a      	mov	r2, sp
 8003a8c:	f7ff ffc8 	bl	8003a20 <__swhatbuf_r>
 8003a90:	9900      	ldr	r1, [sp, #0]
 8003a92:	4605      	mov	r5, r0
 8003a94:	4630      	mov	r0, r6
 8003a96:	f7ff fbb5 	bl	8003204 <_malloc_r>
 8003a9a:	b948      	cbnz	r0, 8003ab0 <__smakebuf_r+0x44>
 8003a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aa0:	059a      	lsls	r2, r3, #22
 8003aa2:	d4ef      	bmi.n	8003a84 <__smakebuf_r+0x18>
 8003aa4:	f023 0303 	bic.w	r3, r3, #3
 8003aa8:	f043 0302 	orr.w	r3, r3, #2
 8003aac:	81a3      	strh	r3, [r4, #12]
 8003aae:	e7e3      	b.n	8003a78 <__smakebuf_r+0xc>
 8003ab0:	89a3      	ldrh	r3, [r4, #12]
 8003ab2:	6020      	str	r0, [r4, #0]
 8003ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab8:	81a3      	strh	r3, [r4, #12]
 8003aba:	9b00      	ldr	r3, [sp, #0]
 8003abc:	6163      	str	r3, [r4, #20]
 8003abe:	9b01      	ldr	r3, [sp, #4]
 8003ac0:	6120      	str	r0, [r4, #16]
 8003ac2:	b15b      	cbz	r3, 8003adc <__smakebuf_r+0x70>
 8003ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ac8:	4630      	mov	r0, r6
 8003aca:	f000 f81d 	bl	8003b08 <_isatty_r>
 8003ace:	b128      	cbz	r0, 8003adc <__smakebuf_r+0x70>
 8003ad0:	89a3      	ldrh	r3, [r4, #12]
 8003ad2:	f023 0303 	bic.w	r3, r3, #3
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	81a3      	strh	r3, [r4, #12]
 8003adc:	89a3      	ldrh	r3, [r4, #12]
 8003ade:	431d      	orrs	r5, r3
 8003ae0:	81a5      	strh	r5, [r4, #12]
 8003ae2:	e7cf      	b.n	8003a84 <__smakebuf_r+0x18>

08003ae4 <_fstat_r>:
 8003ae4:	b538      	push	{r3, r4, r5, lr}
 8003ae6:	4d07      	ldr	r5, [pc, #28]	; (8003b04 <_fstat_r+0x20>)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	4604      	mov	r4, r0
 8003aec:	4608      	mov	r0, r1
 8003aee:	4611      	mov	r1, r2
 8003af0:	602b      	str	r3, [r5, #0]
 8003af2:	f7fc ffb0 	bl	8000a56 <_fstat>
 8003af6:	1c43      	adds	r3, r0, #1
 8003af8:	d102      	bne.n	8003b00 <_fstat_r+0x1c>
 8003afa:	682b      	ldr	r3, [r5, #0]
 8003afc:	b103      	cbz	r3, 8003b00 <_fstat_r+0x1c>
 8003afe:	6023      	str	r3, [r4, #0]
 8003b00:	bd38      	pop	{r3, r4, r5, pc}
 8003b02:	bf00      	nop
 8003b04:	20000264 	.word	0x20000264

08003b08 <_isatty_r>:
 8003b08:	b538      	push	{r3, r4, r5, lr}
 8003b0a:	4d06      	ldr	r5, [pc, #24]	; (8003b24 <_isatty_r+0x1c>)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	4604      	mov	r4, r0
 8003b10:	4608      	mov	r0, r1
 8003b12:	602b      	str	r3, [r5, #0]
 8003b14:	f7fc ffaf 	bl	8000a76 <_isatty>
 8003b18:	1c43      	adds	r3, r0, #1
 8003b1a:	d102      	bne.n	8003b22 <_isatty_r+0x1a>
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	b103      	cbz	r3, 8003b22 <_isatty_r+0x1a>
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	bd38      	pop	{r3, r4, r5, pc}
 8003b24:	20000264 	.word	0x20000264

08003b28 <_sbrk_r>:
 8003b28:	b538      	push	{r3, r4, r5, lr}
 8003b2a:	4d06      	ldr	r5, [pc, #24]	; (8003b44 <_sbrk_r+0x1c>)
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	4604      	mov	r4, r0
 8003b30:	4608      	mov	r0, r1
 8003b32:	602b      	str	r3, [r5, #0]
 8003b34:	f7fc ffb8 	bl	8000aa8 <_sbrk>
 8003b38:	1c43      	adds	r3, r0, #1
 8003b3a:	d102      	bne.n	8003b42 <_sbrk_r+0x1a>
 8003b3c:	682b      	ldr	r3, [r5, #0]
 8003b3e:	b103      	cbz	r3, 8003b42 <_sbrk_r+0x1a>
 8003b40:	6023      	str	r3, [r4, #0]
 8003b42:	bd38      	pop	{r3, r4, r5, pc}
 8003b44:	20000264 	.word	0x20000264

08003b48 <_init>:
 8003b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4a:	bf00      	nop
 8003b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4e:	bc08      	pop	{r3}
 8003b50:	469e      	mov	lr, r3
 8003b52:	4770      	bx	lr

08003b54 <_fini>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	bf00      	nop
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr
