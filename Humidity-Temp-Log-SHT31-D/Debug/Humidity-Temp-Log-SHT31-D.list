
Humidity-Temp-Log-SHT31-D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002678  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800283c  0800283c  0001283c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002854  08002854  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002854  08002854  00012854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800285c  0800285c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800285c  0800285c  0001285c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002860  08002860  00012860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002870  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002870  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bbc6  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e9e  00000000  00000000  0002bc45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0002dae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c3  00000000  00000000  0002e4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002110c  00000000  00000000  0002ecab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f05d  00000000  00000000  0004fdb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6cf9  00000000  00000000  0005ee14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027fc  00000000  00000000  00125b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0012830c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002824 	.word	0x08002824

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002824 	.word	0x08002824

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	4b34      	ldr	r3, [pc, #208]	; (80005ec <MX_GPIO_Init+0xec>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a33      	ldr	r2, [pc, #204]	; (80005ec <MX_GPIO_Init+0xec>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b31      	ldr	r3, [pc, #196]	; (80005ec <MX_GPIO_Init+0xec>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b2d      	ldr	r3, [pc, #180]	; (80005ec <MX_GPIO_Init+0xec>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a2c      	ldr	r2, [pc, #176]	; (80005ec <MX_GPIO_Init+0xec>)
 800053c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b2a      	ldr	r3, [pc, #168]	; (80005ec <MX_GPIO_Init+0xec>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b26      	ldr	r3, [pc, #152]	; (80005ec <MX_GPIO_Init+0xec>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a25      	ldr	r2, [pc, #148]	; (80005ec <MX_GPIO_Init+0xec>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b23      	ldr	r3, [pc, #140]	; (80005ec <MX_GPIO_Init+0xec>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <MX_GPIO_Init+0xec>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a1e      	ldr	r2, [pc, #120]	; (80005ec <MX_GPIO_Init+0xec>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <MX_GPIO_Init+0xec>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2120      	movs	r1, #32
 800058a:	4819      	ldr	r0, [pc, #100]	; (80005f0 <MX_GPIO_Init+0xf0>)
 800058c:	f000 fd40 	bl	8001010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000596:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800059a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4619      	mov	r1, r3
 80005a6:	4813      	ldr	r0, [pc, #76]	; (80005f4 <MX_GPIO_Init+0xf4>)
 80005a8:	f000 fb9e 	bl	8000ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005ac:	2320      	movs	r3, #32
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4619      	mov	r1, r3
 80005c2:	480b      	ldr	r0, [pc, #44]	; (80005f0 <MX_GPIO_Init+0xf0>)
 80005c4:	f000 fb90 	bl	8000ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SHT31_D_ADDR_Pin;
 80005c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005d2:	2302      	movs	r3, #2
 80005d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SHT31_D_ADDR_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4804      	ldr	r0, [pc, #16]	; (80005f0 <MX_GPIO_Init+0xf0>)
 80005de:	f000 fb83 	bl	8000ce8 <HAL_GPIO_Init>

}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	; 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020000 	.word	0x40020000
 80005f4:	40020800 	.word	0x40020800

080005f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_I2C1_Init+0x50>)
 80005fe:	4a13      	ldr	r2, [pc, #76]	; (800064c <MX_I2C1_Init+0x54>)
 8000600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_I2C1_Init+0x50>)
 8000604:	4a12      	ldr	r2, [pc, #72]	; (8000650 <MX_I2C1_Init+0x58>)
 8000606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_I2C1_Init+0x50>)
 8000616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800061a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_I2C1_Init+0x50>)
 8000636:	f000 fd05 	bl	8001044 <HAL_I2C_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000640:	f000 f8dc 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000028 	.word	0x20000028
 800064c:	40005400 	.word	0x40005400
 8000650:	00061a80 	.word	0x00061a80

08000654 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a19      	ldr	r2, [pc, #100]	; (80006d8 <HAL_I2C_MspInit+0x84>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d12b      	bne.n	80006ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <HAL_I2C_MspInit+0x88>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <HAL_I2C_MspInit+0x88>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_I2C_MspInit+0x88>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000692:	23c0      	movs	r3, #192	; 0xc0
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000696:	2312      	movs	r3, #18
 8000698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069e:	2303      	movs	r3, #3
 80006a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006a2:	2304      	movs	r3, #4
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <HAL_I2C_MspInit+0x8c>)
 80006ae:	f000 fb1b 	bl	8000ce8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <HAL_I2C_MspInit+0x88>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	4a08      	ldr	r2, [pc, #32]	; (80006dc <HAL_I2C_MspInit+0x88>)
 80006bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006c0:	6413      	str	r3, [r2, #64]	; 0x40
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_I2C_MspInit+0x88>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	; 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40005400 	.word	0x40005400
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020400 	.word	0x40020400

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e8:	f000 f9a6 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ec:	f000 f814 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f0:	f7ff ff06 	bl	8000500 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006f4:	f7ff ff80 	bl	80005f8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80006f8:	f000 f902 	bl	8000900 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  isSensorConnected = sht31d_check_sensor((uint8_t)SENSOR_I2C_ADDR, &hi2c1);
 80006fc:	4904      	ldr	r1, [pc, #16]	; (8000710 <main+0x2c>)
 80006fe:	2088      	movs	r0, #136	; 0x88
 8000700:	f000 f881 	bl	8000806 <sht31d_check_sensor>
 8000704:	4603      	mov	r3, r0
 8000706:	461a      	mov	r2, r3
 8000708:	4b02      	ldr	r3, [pc, #8]	; (8000714 <main+0x30>)
 800070a:	701a      	strb	r2, [r3, #0]
  asm("NOP");
 800070c:	bf00      	nop
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070e:	e7fe      	b.n	800070e <main+0x2a>
 8000710:	20000028 	.word	0x20000028
 8000714:	2000007c 	.word	0x2000007c

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	; 0x50
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2234      	movs	r2, #52	; 0x34
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f002 f850 	bl	80027cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b2c      	ldr	r3, [pc, #176]	; (80007f4 <SystemClock_Config+0xdc>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a2b      	ldr	r2, [pc, #172]	; (80007f4 <SystemClock_Config+0xdc>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
 800074c:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <SystemClock_Config+0xdc>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000758:	2300      	movs	r3, #0
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <SystemClock_Config+0xe0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a25      	ldr	r2, [pc, #148]	; (80007f8 <SystemClock_Config+0xe0>)
 8000762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <SystemClock_Config+0xe0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000774:	2301      	movs	r3, #1
 8000776:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800077c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	2302      	movs	r3, #2
 8000780:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000782:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000786:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000788:	2304      	movs	r3, #4
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800078c:	23b4      	movs	r3, #180	; 0xb4
 800078e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000790:	2304      	movs	r3, #4
 8000792:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000794:	2302      	movs	r3, #2
 8000796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000798:	2302      	movs	r3, #2
 800079a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fab3 	bl	8001d0c <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007ac:	f000 f826 	bl	80007fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007b0:	f000 ff12 	bl	80015d8 <HAL_PWREx_EnableOverDrive>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007ba:	f000 f81f 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80007c2:	2303      	movs	r3, #3
 80007c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	2105      	movs	r1, #5
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 ff4b 	bl	8001678 <HAL_RCC_ClockConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007e8:	f000 f808 	bl	80007fc <Error_Handler>
  }
}
 80007ec:	bf00      	nop
 80007ee:	3750      	adds	r7, #80	; 0x50
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>

08000806 <sht31d_check_sensor>:
 */

#include "sht31-d.h"

uint8_t sht31d_check_sensor(uint8_t sensor_add, I2C_HandleTypeDef* i2cHandle)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b084      	sub	sp, #16
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	6039      	str	r1, [r7, #0]
 8000810:	71fb      	strb	r3, [r7, #7]
	uint8_t ret_val = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_IsDeviceReady(i2cHandle, sensor_add, 3, 100) == HAL_OK)
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	b299      	uxth	r1, r3
 800081a:	2364      	movs	r3, #100	; 0x64
 800081c:	2203      	movs	r2, #3
 800081e:	6838      	ldr	r0, [r7, #0]
 8000820:	f000 fd54 	bl	80012cc <HAL_I2C_IsDeviceReady>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d101      	bne.n	800082e <sht31d_check_sensor+0x28>
	{
		ret_val = 1;  // Sensor is ready
 800082a:	2301      	movs	r3, #1
 800082c:	73fb      	strb	r3, [r7, #15]
	}
	return ret_val;  // No acknowledgment received
 800082e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <HAL_MspInit+0x4c>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084c:	6453      	str	r3, [r2, #68]	; 0x44
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a08      	ldr	r2, [pc, #32]	; (8000884 <HAL_MspInit+0x4c>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000876:	2007      	movs	r0, #7
 8000878:	f000 fa02 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800088c:	e7fe      	b.n	800088c <NMI_Handler+0x4>

0800088e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <MemManage_Handler+0x4>

0800089a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d4:	f000 f902 	bl	8000adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}

080008dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <SystemInit+0x20>)
 80008e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <SystemInit+0x20>)
 80008e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <MX_USART2_UART_Init+0x50>)
 8000908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000938:	f001 fc86 	bl	8002248 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000942:	f7ff ff5b 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000080 	.word	0x20000080
 8000950:	40004400 	.word	0x40004400

08000954 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a19      	ldr	r2, [pc, #100]	; (80009d8 <HAL_UART_MspInit+0x84>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d12b      	bne.n	80009ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <HAL_UART_MspInit+0x88>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a17      	ldr	r2, [pc, #92]	; (80009dc <HAL_UART_MspInit+0x88>)
 8000980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <HAL_UART_MspInit+0x88>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_UART_MspInit+0x88>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a10      	ldr	r2, [pc, #64]	; (80009dc <HAL_UART_MspInit+0x88>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_UART_MspInit+0x88>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009ae:	230c      	movs	r3, #12
 80009b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009be:	2307      	movs	r3, #7
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <HAL_UART_MspInit+0x8c>)
 80009ca:	f000 f98d 	bl	8000ce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009ce:	bf00      	nop
 80009d0:	3728      	adds	r7, #40	; 0x28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40004400 	.word	0x40004400
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020000 	.word	0x40020000

080009e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ea:	490e      	ldr	r1, [pc, #56]	; (8000a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a00:	4c0b      	ldr	r4, [pc, #44]	; (8000a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a0e:	f7ff ff65 	bl	80008dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f001 fee3 	bl	80027dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a16:	f7ff fe65 	bl	80006e4 <main>
  bx  lr    
 8000a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a28:	08002864 	.word	0x08002864
  ldr r2, =_sbss
 8000a2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a30:	200000c8 	.word	0x200000c8

08000a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC_IRQHandler>
	...

08000a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <HAL_Init+0x40>)
 8000a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <HAL_Init+0x40>)
 8000a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_Init+0x40>)
 8000a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f90d 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f000 f808 	bl	8000a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a6c:	f7ff fee4 	bl	8000838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023c00 	.word	0x40023c00

08000a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x54>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x58>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f917 	bl	8000cce <HAL_SYSTICK_Config>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00e      	b.n	8000ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d80a      	bhi.n	8000ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	f000 f8ed 	bl	8000c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000abc:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <HAL_InitTick+0x5c>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e000      	b.n	8000ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x20>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x24>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <HAL_IncTick+0x24>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000008 	.word	0x20000008
 8000b00:	200000c4 	.word	0x200000c4

08000b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <HAL_GetTick+0x14>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	200000c4 	.word	0x200000c4

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	; (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	; 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c4c:	d301      	bcc.n	8000c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00f      	b.n	8000c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <SysTick_Config+0x40>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f7ff ff8e 	bl	8000b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SysTick_Config+0x40>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SysTick_Config+0x40>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff47 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca8:	f7ff ff5c 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	6978      	ldr	r0, [r7, #20]
 8000cb4:	f7ff ff8e 	bl	8000bd4 <NVIC_EncodePriority>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff5d 	bl	8000b80 <__NVIC_SetPriority>
}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ffb0 	bl	8000c3c <SysTick_Config>
 8000cdc:	4603      	mov	r3, r0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	; 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
 8000d02:	e165      	b.n	8000fd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d04:	2201      	movs	r2, #1
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	f040 8154 	bne.w	8000fca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d005      	beq.n	8000d3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d130      	bne.n	8000d9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	68da      	ldr	r2, [r3, #12]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d70:	2201      	movs	r2, #1
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	091b      	lsrs	r3, r3, #4
 8000d86:	f003 0201 	and.w	r2, r3, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d017      	beq.n	8000dd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2203      	movs	r2, #3
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d123      	bne.n	8000e2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	08da      	lsrs	r2, r3, #3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3208      	adds	r2, #8
 8000dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	f003 0307 	and.w	r3, r3, #7
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	220f      	movs	r2, #15
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	691a      	ldr	r2, [r3, #16]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	08da      	lsrs	r2, r3, #3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3208      	adds	r2, #8
 8000e26:	69b9      	ldr	r1, [r7, #24]
 8000e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0203 	and.w	r2, r3, #3
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f000 80ae 	beq.w	8000fca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b5d      	ldr	r3, [pc, #372]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	4a5c      	ldr	r2, [pc, #368]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7e:	4b5a      	ldr	r3, [pc, #360]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e8a:	4a58      	ldr	r2, [pc, #352]	; (8000fec <HAL_GPIO_Init+0x304>)
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	3302      	adds	r3, #2
 8000e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	220f      	movs	r2, #15
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4f      	ldr	r2, [pc, #316]	; (8000ff0 <HAL_GPIO_Init+0x308>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d025      	beq.n	8000f02 <HAL_GPIO_Init+0x21a>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4e      	ldr	r2, [pc, #312]	; (8000ff4 <HAL_GPIO_Init+0x30c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d01f      	beq.n	8000efe <HAL_GPIO_Init+0x216>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4d      	ldr	r2, [pc, #308]	; (8000ff8 <HAL_GPIO_Init+0x310>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d019      	beq.n	8000efa <HAL_GPIO_Init+0x212>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4c      	ldr	r2, [pc, #304]	; (8000ffc <HAL_GPIO_Init+0x314>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d013      	beq.n	8000ef6 <HAL_GPIO_Init+0x20e>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4b      	ldr	r2, [pc, #300]	; (8001000 <HAL_GPIO_Init+0x318>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d00d      	beq.n	8000ef2 <HAL_GPIO_Init+0x20a>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4a      	ldr	r2, [pc, #296]	; (8001004 <HAL_GPIO_Init+0x31c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d007      	beq.n	8000eee <HAL_GPIO_Init+0x206>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a49      	ldr	r2, [pc, #292]	; (8001008 <HAL_GPIO_Init+0x320>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d101      	bne.n	8000eea <HAL_GPIO_Init+0x202>
 8000ee6:	2306      	movs	r3, #6
 8000ee8:	e00c      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000eea:	2307      	movs	r3, #7
 8000eec:	e00a      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000eee:	2305      	movs	r3, #5
 8000ef0:	e008      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	e006      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e004      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e002      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000f02:	2300      	movs	r3, #0
 8000f04:	69fa      	ldr	r2, [r7, #28]
 8000f06:	f002 0203 	and.w	r2, r2, #3
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	4093      	lsls	r3, r2
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f14:	4935      	ldr	r1, [pc, #212]	; (8000fec <HAL_GPIO_Init+0x304>)
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f22:	4b3a      	ldr	r3, [pc, #232]	; (800100c <HAL_GPIO_Init+0x324>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f46:	4a31      	ldr	r2, [pc, #196]	; (800100c <HAL_GPIO_Init+0x324>)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f4c:	4b2f      	ldr	r3, [pc, #188]	; (800100c <HAL_GPIO_Init+0x324>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f70:	4a26      	ldr	r2, [pc, #152]	; (800100c <HAL_GPIO_Init+0x324>)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f76:	4b25      	ldr	r3, [pc, #148]	; (800100c <HAL_GPIO_Init+0x324>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f9a:	4a1c      	ldr	r2, [pc, #112]	; (800100c <HAL_GPIO_Init+0x324>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <HAL_GPIO_Init+0x324>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fc4:	4a11      	ldr	r2, [pc, #68]	; (800100c <HAL_GPIO_Init+0x324>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	61fb      	str	r3, [r7, #28]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	2b0f      	cmp	r3, #15
 8000fd4:	f67f ae96 	bls.w	8000d04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3724      	adds	r7, #36	; 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40013800 	.word	0x40013800
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	40020800 	.word	0x40020800
 8000ffc:	40020c00 	.word	0x40020c00
 8001000:	40021000 	.word	0x40021000
 8001004:	40021400 	.word	0x40021400
 8001008:	40021800 	.word	0x40021800
 800100c:	40013c00 	.word	0x40013c00

08001010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
 800101c:	4613      	mov	r3, r2
 800101e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001020:	787b      	ldrb	r3, [r7, #1]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001026:	887a      	ldrh	r2, [r7, #2]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800102c:	e003      	b.n	8001036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800102e:	887b      	ldrh	r3, [r7, #2]
 8001030:	041a      	lsls	r2, r3, #16
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	619a      	str	r2, [r3, #24]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e12b      	b.n	80012ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d106      	bne.n	8001070 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff faf2 	bl	8000654 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2224      	movs	r2, #36	; 0x24
 8001074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0201 	bic.w	r2, r2, #1
 8001086:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001096:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010a8:	f000 fbd8 	bl	800185c <HAL_RCC_GetPCLK1Freq>
 80010ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4a81      	ldr	r2, [pc, #516]	; (80012b8 <HAL_I2C_Init+0x274>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d807      	bhi.n	80010c8 <HAL_I2C_Init+0x84>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4a80      	ldr	r2, [pc, #512]	; (80012bc <HAL_I2C_Init+0x278>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	bf94      	ite	ls
 80010c0:	2301      	movls	r3, #1
 80010c2:	2300      	movhi	r3, #0
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	e006      	b.n	80010d6 <HAL_I2C_Init+0x92>
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4a7d      	ldr	r2, [pc, #500]	; (80012c0 <HAL_I2C_Init+0x27c>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	bf94      	ite	ls
 80010d0:	2301      	movls	r3, #1
 80010d2:	2300      	movhi	r3, #0
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e0e7      	b.n	80012ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4a78      	ldr	r2, [pc, #480]	; (80012c4 <HAL_I2C_Init+0x280>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	0c9b      	lsrs	r3, r3, #18
 80010e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	430a      	orrs	r2, r1
 80010fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4a6a      	ldr	r2, [pc, #424]	; (80012b8 <HAL_I2C_Init+0x274>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d802      	bhi.n	8001118 <HAL_I2C_Init+0xd4>
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	3301      	adds	r3, #1
 8001116:	e009      	b.n	800112c <HAL_I2C_Init+0xe8>
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800111e:	fb02 f303 	mul.w	r3, r2, r3
 8001122:	4a69      	ldr	r2, [pc, #420]	; (80012c8 <HAL_I2C_Init+0x284>)
 8001124:	fba2 2303 	umull	r2, r3, r2, r3
 8001128:	099b      	lsrs	r3, r3, #6
 800112a:	3301      	adds	r3, #1
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	6812      	ldr	r2, [r2, #0]
 8001130:	430b      	orrs	r3, r1
 8001132:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800113e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	495c      	ldr	r1, [pc, #368]	; (80012b8 <HAL_I2C_Init+0x274>)
 8001148:	428b      	cmp	r3, r1
 800114a:	d819      	bhi.n	8001180 <HAL_I2C_Init+0x13c>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	1e59      	subs	r1, r3, #1
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	fbb1 f3f3 	udiv	r3, r1, r3
 800115a:	1c59      	adds	r1, r3, #1
 800115c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001160:	400b      	ands	r3, r1
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00a      	beq.n	800117c <HAL_I2C_Init+0x138>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	1e59      	subs	r1, r3, #1
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fbb1 f3f3 	udiv	r3, r1, r3
 8001174:	3301      	adds	r3, #1
 8001176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800117a:	e051      	b.n	8001220 <HAL_I2C_Init+0x1dc>
 800117c:	2304      	movs	r3, #4
 800117e:	e04f      	b.n	8001220 <HAL_I2C_Init+0x1dc>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d111      	bne.n	80011ac <HAL_I2C_Init+0x168>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	1e58      	subs	r0, r3, #1
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6859      	ldr	r1, [r3, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	440b      	add	r3, r1
 8001196:	fbb0 f3f3 	udiv	r3, r0, r3
 800119a:	3301      	adds	r3, #1
 800119c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	bf0c      	ite	eq
 80011a4:	2301      	moveq	r3, #1
 80011a6:	2300      	movne	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	e012      	b.n	80011d2 <HAL_I2C_Init+0x18e>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	1e58      	subs	r0, r3, #1
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6859      	ldr	r1, [r3, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	0099      	lsls	r1, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	fbb0 f3f3 	udiv	r3, r0, r3
 80011c2:	3301      	adds	r3, #1
 80011c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bf0c      	ite	eq
 80011cc:	2301      	moveq	r3, #1
 80011ce:	2300      	movne	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_I2C_Init+0x196>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e022      	b.n	8001220 <HAL_I2C_Init+0x1dc>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10e      	bne.n	8001200 <HAL_I2C_Init+0x1bc>
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	1e58      	subs	r0, r3, #1
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6859      	ldr	r1, [r3, #4]
 80011ea:	460b      	mov	r3, r1
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	440b      	add	r3, r1
 80011f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80011f4:	3301      	adds	r3, #1
 80011f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011fe:	e00f      	b.n	8001220 <HAL_I2C_Init+0x1dc>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	1e58      	subs	r0, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6859      	ldr	r1, [r3, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	0099      	lsls	r1, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	fbb0 f3f3 	udiv	r3, r0, r3
 8001216:	3301      	adds	r3, #1
 8001218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800121c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	6809      	ldr	r1, [r1, #0]
 8001224:	4313      	orrs	r3, r2
 8001226:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69da      	ldr	r2, [r3, #28]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	431a      	orrs	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800124e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6911      	ldr	r1, [r2, #16]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68d2      	ldr	r2, [r2, #12]
 800125a:	4311      	orrs	r1, r2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6812      	ldr	r2, [r2, #0]
 8001260:	430b      	orrs	r3, r1
 8001262:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695a      	ldr	r2, [r3, #20]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	430a      	orrs	r2, r1
 800127e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f042 0201 	orr.w	r2, r2, #1
 800128e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2220      	movs	r2, #32
 800129a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	000186a0 	.word	0x000186a0
 80012bc:	001e847f 	.word	0x001e847f
 80012c0:	003d08ff 	.word	0x003d08ff
 80012c4:	431bde83 	.word	0x431bde83
 80012c8:	10624dd3 	.word	0x10624dd3

080012cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	460b      	mov	r3, r1
 80012da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff fc12 	bl	8000b04 <HAL_GetTick>
 80012e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b20      	cmp	r3, #32
 80012f0:	f040 8111 	bne.w	8001516 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2319      	movs	r3, #25
 80012fa:	2201      	movs	r2, #1
 80012fc:	4988      	ldr	r1, [pc, #544]	; (8001520 <HAL_I2C_IsDeviceReady+0x254>)
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f000 f912 	bl	8001528 <I2C_WaitOnFlagUntilTimeout>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800130a:	2302      	movs	r3, #2
 800130c:	e104      	b.n	8001518 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001314:	2b01      	cmp	r3, #1
 8001316:	d101      	bne.n	800131c <HAL_I2C_IsDeviceReady+0x50>
 8001318:	2302      	movs	r3, #2
 800131a:	e0fd      	b.n	8001518 <HAL_I2C_IsDeviceReady+0x24c>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b01      	cmp	r3, #1
 8001330:	d007      	beq.n	8001342 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f042 0201 	orr.w	r2, r2, #1
 8001340:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001350:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2224      	movs	r2, #36	; 0x24
 8001356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4a70      	ldr	r2, [pc, #448]	; (8001524 <HAL_I2C_IsDeviceReady+0x258>)
 8001364:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001374:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	2200      	movs	r2, #0
 800137e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f000 f8d0 	bl	8001528 <I2C_WaitOnFlagUntilTimeout>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00d      	beq.n	80013aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800139c:	d103      	bne.n	80013a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e0b6      	b.n	8001518 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80013aa:	897b      	ldrh	r3, [r7, #10]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80013b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80013ba:	f7ff fba3 	bl	8000b04 <HAL_GetTick>
 80013be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	bf0c      	ite	eq
 80013ce:	2301      	moveq	r3, #1
 80013d0:	2300      	movne	r3, #0
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e4:	bf0c      	ite	eq
 80013e6:	2301      	moveq	r3, #1
 80013e8:	2300      	movne	r3, #0
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80013ee:	e025      	b.n	800143c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80013f0:	f7ff fb88 	bl	8000b04 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d302      	bcc.n	8001406 <HAL_I2C_IsDeviceReady+0x13a>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d103      	bne.n	800140e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	22a0      	movs	r2, #160	; 0xa0
 800140a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b02      	cmp	r3, #2
 800141a:	bf0c      	ite	eq
 800141c:	2301      	moveq	r3, #1
 800141e:	2300      	movne	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800142e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001432:	bf0c      	ite	eq
 8001434:	2301      	moveq	r3, #1
 8001436:	2300      	movne	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2ba0      	cmp	r3, #160	; 0xa0
 8001446:	d005      	beq.n	8001454 <HAL_I2C_IsDeviceReady+0x188>
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d102      	bne.n	8001454 <HAL_I2C_IsDeviceReady+0x188>
 800144e:	7dbb      	ldrb	r3, [r7, #22]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0cd      	beq.n	80013f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2220      	movs	r2, #32
 8001458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b02      	cmp	r3, #2
 8001468:	d129      	bne.n	80014be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001478:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2319      	movs	r3, #25
 8001496:	2201      	movs	r2, #1
 8001498:	4921      	ldr	r1, [pc, #132]	; (8001520 <HAL_I2C_IsDeviceReady+0x254>)
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 f844 	bl	8001528 <I2C_WaitOnFlagUntilTimeout>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e036      	b.n	8001518 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2220      	movs	r2, #32
 80014ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e02c      	b.n	8001518 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80014d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2319      	movs	r3, #25
 80014de:	2201      	movs	r2, #1
 80014e0:	490f      	ldr	r1, [pc, #60]	; (8001520 <HAL_I2C_IsDeviceReady+0x254>)
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 f820 	bl	8001528 <I2C_WaitOnFlagUntilTimeout>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e012      	b.n	8001518 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	3301      	adds	r3, #1
 80014f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	f4ff af32 	bcc.w	8001366 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2220      	movs	r2, #32
 8001506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001516:	2302      	movs	r3, #2
  }
}
 8001518:	4618      	mov	r0, r3
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	00100002 	.word	0x00100002
 8001524:	ffff0000 	.word	0xffff0000

08001528 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	4613      	mov	r3, r2
 8001536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001538:	e025      	b.n	8001586 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001540:	d021      	beq.n	8001586 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001542:	f7ff fadf 	bl	8000b04 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d302      	bcc.n	8001558 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d116      	bne.n	8001586 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2220      	movs	r2, #32
 8001562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f043 0220 	orr.w	r2, r3, #32
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e023      	b.n	80015ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	0c1b      	lsrs	r3, r3, #16
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b01      	cmp	r3, #1
 800158e:	d10d      	bne.n	80015ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	4013      	ands	r3, r2
 800159c:	b29b      	uxth	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bf0c      	ite	eq
 80015a2:	2301      	moveq	r3, #1
 80015a4:	2300      	movne	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	e00c      	b.n	80015c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4013      	ands	r3, r2
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bf0c      	ite	eq
 80015be:	2301      	moveq	r3, #1
 80015c0:	2300      	movne	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d0b6      	beq.n	800153a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	4b20      	ldr	r3, [pc, #128]	; (8001668 <HAL_PWREx_EnableOverDrive+0x90>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a1f      	ldr	r2, [pc, #124]	; (8001668 <HAL_PWREx_EnableOverDrive+0x90>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_PWREx_EnableOverDrive+0x90>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_PWREx_EnableOverDrive+0x94>)
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001604:	f7ff fa7e 	bl	8000b04 <HAL_GetTick>
 8001608:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800160a:	e009      	b.n	8001620 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800160c:	f7ff fa7a 	bl	8000b04 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800161a:	d901      	bls.n	8001620 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e01f      	b.n	8001660 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <HAL_PWREx_EnableOverDrive+0x98>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162c:	d1ee      	bne.n	800160c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001634:	f7ff fa66 	bl	8000b04 <HAL_GetTick>
 8001638:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800163a:	e009      	b.n	8001650 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800163c:	f7ff fa62 	bl	8000b04 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800164a:	d901      	bls.n	8001650 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e007      	b.n	8001660 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <HAL_PWREx_EnableOverDrive+0x98>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001658:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800165c:	d1ee      	bne.n	800163c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40023800 	.word	0x40023800
 800166c:	420e0040 	.word	0x420e0040
 8001670:	40007000 	.word	0x40007000
 8001674:	420e0044 	.word	0x420e0044

08001678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0cc      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800168c:	4b68      	ldr	r3, [pc, #416]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 030f 	and.w	r3, r3, #15
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d90c      	bls.n	80016b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169a:	4b65      	ldr	r3, [pc, #404]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a2:	4b63      	ldr	r3, [pc, #396]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0b8      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d020      	beq.n	8001702 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016cc:	4b59      	ldr	r3, [pc, #356]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4a58      	ldr	r2, [pc, #352]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e4:	4b53      	ldr	r3, [pc, #332]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4a52      	ldr	r2, [pc, #328]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f0:	4b50      	ldr	r3, [pc, #320]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	494d      	ldr	r1, [pc, #308]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d044      	beq.n	8001798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d107      	bne.n	8001726 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d119      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e07f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d003      	beq.n	8001736 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001732:	2b03      	cmp	r3, #3
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001736:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d109      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e06f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001746:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e067      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001756:	4b37      	ldr	r3, [pc, #220]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f023 0203 	bic.w	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4934      	ldr	r1, [pc, #208]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	4313      	orrs	r3, r2
 8001766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001768:	f7ff f9cc 	bl	8000b04 <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	e00a      	b.n	8001786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001770:	f7ff f9c8 	bl	8000b04 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	; 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e04f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 020c 	and.w	r2, r3, #12
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	429a      	cmp	r2, r3
 8001796:	d1eb      	bne.n	8001770 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001798:	4b25      	ldr	r3, [pc, #148]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 030f 	and.w	r3, r3, #15
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d20c      	bcs.n	80017c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b22      	ldr	r3, [pc, #136]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e032      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d008      	beq.n	80017de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4916      	ldr	r1, [pc, #88]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	490e      	ldr	r1, [pc, #56]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017fe:	f000 f855 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8001802:	4602      	mov	r2, r0
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	490a      	ldr	r1, [pc, #40]	; (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	5ccb      	ldrb	r3, [r1, r3]
 8001812:	fa22 f303 	lsr.w	r3, r2, r3
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1c8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff f92c 	bl	8000a7c <HAL_InitTick>

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00
 8001834:	40023800 	.word	0x40023800
 8001838:	0800283c 	.word	0x0800283c
 800183c:	20000000 	.word	0x20000000
 8001840:	20000004 	.word	0x20000004

08001844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_RCC_GetHCLKFreq+0x14>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000000 	.word	0x20000000

0800185c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001860:	f7ff fff0 	bl	8001844 <HAL_RCC_GetHCLKFreq>
 8001864:	4602      	mov	r2, r0
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	0a9b      	lsrs	r3, r3, #10
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	4903      	ldr	r1, [pc, #12]	; (8001880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001872:	5ccb      	ldrb	r3, [r1, r3]
 8001874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001878:	4618      	mov	r0, r3
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	0800284c 	.word	0x0800284c

08001884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001888:	f7ff ffdc 	bl	8001844 <HAL_RCC_GetHCLKFreq>
 800188c:	4602      	mov	r2, r0
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	0b5b      	lsrs	r3, r3, #13
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	4903      	ldr	r1, [pc, #12]	; (80018a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800189a:	5ccb      	ldrb	r3, [r1, r3]
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40023800 	.word	0x40023800
 80018a8:	0800284c 	.word	0x0800284c

080018ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018b0:	b0ae      	sub	sp, #184	; 0xb8
 80018b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d2:	4bcb      	ldr	r3, [pc, #812]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x354>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b0c      	cmp	r3, #12
 80018dc:	f200 8206 	bhi.w	8001cec <HAL_RCC_GetSysClockFreq+0x440>
 80018e0:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80018e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e6:	bf00      	nop
 80018e8:	0800191d 	.word	0x0800191d
 80018ec:	08001ced 	.word	0x08001ced
 80018f0:	08001ced 	.word	0x08001ced
 80018f4:	08001ced 	.word	0x08001ced
 80018f8:	08001925 	.word	0x08001925
 80018fc:	08001ced 	.word	0x08001ced
 8001900:	08001ced 	.word	0x08001ced
 8001904:	08001ced 	.word	0x08001ced
 8001908:	0800192d 	.word	0x0800192d
 800190c:	08001ced 	.word	0x08001ced
 8001910:	08001ced 	.word	0x08001ced
 8001914:	08001ced 	.word	0x08001ced
 8001918:	08001b1d 	.word	0x08001b1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800191c:	4bb9      	ldr	r3, [pc, #740]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x358>)
 800191e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001922:	e1e7      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001924:	4bb8      	ldr	r3, [pc, #736]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001926:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800192a:	e1e3      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800192c:	4bb4      	ldr	r3, [pc, #720]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x354>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001938:	4bb1      	ldr	r3, [pc, #708]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x354>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d071      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001944:	4bae      	ldr	r3, [pc, #696]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	099b      	lsrs	r3, r3, #6
 800194a:	2200      	movs	r2, #0
 800194c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001950:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001954:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800195c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001966:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800196a:	4622      	mov	r2, r4
 800196c:	462b      	mov	r3, r5
 800196e:	f04f 0000 	mov.w	r0, #0
 8001972:	f04f 0100 	mov.w	r1, #0
 8001976:	0159      	lsls	r1, r3, #5
 8001978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800197c:	0150      	lsls	r0, r2, #5
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4621      	mov	r1, r4
 8001984:	1a51      	subs	r1, r2, r1
 8001986:	6439      	str	r1, [r7, #64]	; 0x40
 8001988:	4629      	mov	r1, r5
 800198a:	eb63 0301 	sbc.w	r3, r3, r1
 800198e:	647b      	str	r3, [r7, #68]	; 0x44
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800199c:	4649      	mov	r1, r9
 800199e:	018b      	lsls	r3, r1, #6
 80019a0:	4641      	mov	r1, r8
 80019a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019a6:	4641      	mov	r1, r8
 80019a8:	018a      	lsls	r2, r1, #6
 80019aa:	4641      	mov	r1, r8
 80019ac:	1a51      	subs	r1, r2, r1
 80019ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80019b0:	4649      	mov	r1, r9
 80019b2:	eb63 0301 	sbc.w	r3, r3, r1
 80019b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80019c4:	4649      	mov	r1, r9
 80019c6:	00cb      	lsls	r3, r1, #3
 80019c8:	4641      	mov	r1, r8
 80019ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019ce:	4641      	mov	r1, r8
 80019d0:	00ca      	lsls	r2, r1, #3
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	4603      	mov	r3, r0
 80019d8:	4622      	mov	r2, r4
 80019da:	189b      	adds	r3, r3, r2
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
 80019de:	462b      	mov	r3, r5
 80019e0:	460a      	mov	r2, r1
 80019e2:	eb42 0303 	adc.w	r3, r2, r3
 80019e6:	637b      	str	r3, [r7, #52]	; 0x34
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019f4:	4629      	mov	r1, r5
 80019f6:	024b      	lsls	r3, r1, #9
 80019f8:	4621      	mov	r1, r4
 80019fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019fe:	4621      	mov	r1, r4
 8001a00:	024a      	lsls	r2, r1, #9
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001a14:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001a18:	f7fe fbf4 	bl	8000204 <__aeabi_uldivmod>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4613      	mov	r3, r2
 8001a22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a26:	e067      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a28:	4b75      	ldr	r3, [pc, #468]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	099b      	lsrs	r3, r3, #6
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a34:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a40:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a42:	2300      	movs	r3, #0
 8001a44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a46:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001a4a:	4622      	mov	r2, r4
 8001a4c:	462b      	mov	r3, r5
 8001a4e:	f04f 0000 	mov.w	r0, #0
 8001a52:	f04f 0100 	mov.w	r1, #0
 8001a56:	0159      	lsls	r1, r3, #5
 8001a58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a5c:	0150      	lsls	r0, r2, #5
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4621      	mov	r1, r4
 8001a64:	1a51      	subs	r1, r2, r1
 8001a66:	62b9      	str	r1, [r7, #40]	; 0x28
 8001a68:	4629      	mov	r1, r5
 8001a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001a7c:	4649      	mov	r1, r9
 8001a7e:	018b      	lsls	r3, r1, #6
 8001a80:	4641      	mov	r1, r8
 8001a82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a86:	4641      	mov	r1, r8
 8001a88:	018a      	lsls	r2, r1, #6
 8001a8a:	4641      	mov	r1, r8
 8001a8c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a90:	4649      	mov	r1, r9
 8001a92:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001aa2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001aa6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001aaa:	4692      	mov	sl, r2
 8001aac:	469b      	mov	fp, r3
 8001aae:	4623      	mov	r3, r4
 8001ab0:	eb1a 0303 	adds.w	r3, sl, r3
 8001ab4:	623b      	str	r3, [r7, #32]
 8001ab6:	462b      	mov	r3, r5
 8001ab8:	eb4b 0303 	adc.w	r3, fp, r3
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001aca:	4629      	mov	r1, r5
 8001acc:	028b      	lsls	r3, r1, #10
 8001ace:	4621      	mov	r1, r4
 8001ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	028a      	lsls	r2, r1, #10
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	673b      	str	r3, [r7, #112]	; 0x70
 8001ae4:	677a      	str	r2, [r7, #116]	; 0x74
 8001ae6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001aea:	f7fe fb8b 	bl	8000204 <__aeabi_uldivmod>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4613      	mov	r3, r2
 8001af4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001af8:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	0c1b      	lsrs	r3, r3, #16
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	3301      	adds	r3, #1
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001b0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b1a:	e0eb      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b1c:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b28:	4b35      	ldr	r3, [pc, #212]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d06b      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b34:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	099b      	lsrs	r3, r3, #6
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b46:	663b      	str	r3, [r7, #96]	; 0x60
 8001b48:	2300      	movs	r3, #0
 8001b4a:	667b      	str	r3, [r7, #100]	; 0x64
 8001b4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001b50:	4622      	mov	r2, r4
 8001b52:	462b      	mov	r3, r5
 8001b54:	f04f 0000 	mov.w	r0, #0
 8001b58:	f04f 0100 	mov.w	r1, #0
 8001b5c:	0159      	lsls	r1, r3, #5
 8001b5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b62:	0150      	lsls	r0, r2, #5
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4621      	mov	r1, r4
 8001b6a:	1a51      	subs	r1, r2, r1
 8001b6c:	61b9      	str	r1, [r7, #24]
 8001b6e:	4629      	mov	r1, r5
 8001b70:	eb63 0301 	sbc.w	r3, r3, r1
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001b82:	4659      	mov	r1, fp
 8001b84:	018b      	lsls	r3, r1, #6
 8001b86:	4651      	mov	r1, sl
 8001b88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b8c:	4651      	mov	r1, sl
 8001b8e:	018a      	lsls	r2, r1, #6
 8001b90:	4651      	mov	r1, sl
 8001b92:	ebb2 0801 	subs.w	r8, r2, r1
 8001b96:	4659      	mov	r1, fp
 8001b98:	eb63 0901 	sbc.w	r9, r3, r1
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ba8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bb0:	4690      	mov	r8, r2
 8001bb2:	4699      	mov	r9, r3
 8001bb4:	4623      	mov	r3, r4
 8001bb6:	eb18 0303 	adds.w	r3, r8, r3
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	462b      	mov	r3, r5
 8001bbe:	eb49 0303 	adc.w	r3, r9, r3
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001bd0:	4629      	mov	r1, r5
 8001bd2:	024b      	lsls	r3, r1, #9
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bda:	4621      	mov	r1, r4
 8001bdc:	024a      	lsls	r2, r1, #9
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001be6:	2200      	movs	r2, #0
 8001be8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001bea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001bec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001bf0:	f7fe fb08 	bl	8000204 <__aeabi_uldivmod>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001bfe:	e065      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x420>
 8001c00:	40023800 	.word	0x40023800
 8001c04:	00f42400 	.word	0x00f42400
 8001c08:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0c:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x458>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	099b      	lsrs	r3, r3, #6
 8001c12:	2200      	movs	r2, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	4611      	mov	r1, r2
 8001c18:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c1c:	653b      	str	r3, [r7, #80]	; 0x50
 8001c1e:	2300      	movs	r3, #0
 8001c20:	657b      	str	r3, [r7, #84]	; 0x54
 8001c22:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001c26:	4642      	mov	r2, r8
 8001c28:	464b      	mov	r3, r9
 8001c2a:	f04f 0000 	mov.w	r0, #0
 8001c2e:	f04f 0100 	mov.w	r1, #0
 8001c32:	0159      	lsls	r1, r3, #5
 8001c34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c38:	0150      	lsls	r0, r2, #5
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4641      	mov	r1, r8
 8001c40:	1a51      	subs	r1, r2, r1
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	4649      	mov	r1, r9
 8001c46:	eb63 0301 	sbc.w	r3, r3, r1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001c58:	4659      	mov	r1, fp
 8001c5a:	018b      	lsls	r3, r1, #6
 8001c5c:	4651      	mov	r1, sl
 8001c5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c62:	4651      	mov	r1, sl
 8001c64:	018a      	lsls	r2, r1, #6
 8001c66:	4651      	mov	r1, sl
 8001c68:	1a54      	subs	r4, r2, r1
 8001c6a:	4659      	mov	r1, fp
 8001c6c:	eb63 0501 	sbc.w	r5, r3, r1
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	00eb      	lsls	r3, r5, #3
 8001c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c7e:	00e2      	lsls	r2, r4, #3
 8001c80:	4614      	mov	r4, r2
 8001c82:	461d      	mov	r5, r3
 8001c84:	4643      	mov	r3, r8
 8001c86:	18e3      	adds	r3, r4, r3
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	464b      	mov	r3, r9
 8001c8c:	eb45 0303 	adc.w	r3, r5, r3
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	028b      	lsls	r3, r1, #10
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ca8:	4621      	mov	r1, r4
 8001caa:	028a      	lsls	r2, r1, #10
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cb8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001cba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001cbe:	f7fe faa1 	bl	8000204 <__aeabi_uldivmod>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x458>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	0f1b      	lsrs	r3, r3, #28
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001cda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001cde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001cea:	e003      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001cee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001cf2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	37b8      	adds	r7, #184	; 0xb8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	00f42400 	.word	0x00f42400

08001d0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e28d      	b.n	800223a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8083 	beq.w	8001e32 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d2c:	4b94      	ldr	r3, [pc, #592]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 030c 	and.w	r3, r3, #12
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d019      	beq.n	8001d6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d38:	4b91      	ldr	r3, [pc, #580]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d106      	bne.n	8001d52 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d44:	4b8e      	ldr	r3, [pc, #568]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d50:	d00c      	beq.n	8001d6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d52:	4b8b      	ldr	r3, [pc, #556]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d5a:	2b0c      	cmp	r3, #12
 8001d5c:	d112      	bne.n	8001d84 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d5e:	4b88      	ldr	r3, [pc, #544]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d6a:	d10b      	bne.n	8001d84 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	4b84      	ldr	r3, [pc, #528]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d05b      	beq.n	8001e30 <HAL_RCC_OscConfig+0x124>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d157      	bne.n	8001e30 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e25a      	b.n	800223a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8c:	d106      	bne.n	8001d9c <HAL_RCC_OscConfig+0x90>
 8001d8e:	4b7c      	ldr	r3, [pc, #496]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a7b      	ldr	r2, [pc, #492]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e01d      	b.n	8001dd8 <HAL_RCC_OscConfig+0xcc>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da4:	d10c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0xb4>
 8001da6:	4b76      	ldr	r3, [pc, #472]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a75      	ldr	r2, [pc, #468]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b73      	ldr	r3, [pc, #460]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a72      	ldr	r2, [pc, #456]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e00b      	b.n	8001dd8 <HAL_RCC_OscConfig+0xcc>
 8001dc0:	4b6f      	ldr	r3, [pc, #444]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6e      	ldr	r2, [pc, #440]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b6c      	ldr	r3, [pc, #432]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a6b      	ldr	r2, [pc, #428]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d013      	beq.n	8001e08 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7fe fe90 	bl	8000b04 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de8:	f7fe fe8c 	bl	8000b04 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e21f      	b.n	800223a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	4b61      	ldr	r3, [pc, #388]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0xdc>
 8001e06:	e014      	b.n	8001e32 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7fe fe7c 	bl	8000b04 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e10:	f7fe fe78 	bl	8000b04 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e20b      	b.n	800223a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e22:	4b57      	ldr	r3, [pc, #348]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x104>
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d06f      	beq.n	8001f1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e3e:	4b50      	ldr	r3, [pc, #320]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d017      	beq.n	8001e7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e4a:	4b4d      	ldr	r3, [pc, #308]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d105      	bne.n	8001e62 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e56:	4b4a      	ldr	r3, [pc, #296]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00b      	beq.n	8001e7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e62:	4b47      	ldr	r3, [pc, #284]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e6a:	2b0c      	cmp	r3, #12
 8001e6c:	d11c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e6e:	4b44      	ldr	r3, [pc, #272]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d116      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7a:	4b41      	ldr	r3, [pc, #260]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <HAL_RCC_OscConfig+0x186>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d001      	beq.n	8001e92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e1d3      	b.n	800223a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e92:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4937      	ldr	r1, [pc, #220]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea6:	e03a      	b.n	8001f1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d020      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb0:	4b34      	ldr	r3, [pc, #208]	; (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb6:	f7fe fe25 	bl	8000b04 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ebe:	f7fe fe21 	bl	8000b04 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e1b4      	b.n	800223a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed0:	4b2b      	ldr	r3, [pc, #172]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001edc:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4925      	ldr	r1, [pc, #148]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]
 8001ef0:	e015      	b.n	8001f1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef2:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe fe04 	bl	8000b04 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f00:	f7fe fe00 	bl	8000b04 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e193      	b.n	800223a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f12:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d036      	beq.n	8001f98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d016      	beq.n	8001f60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <HAL_RCC_OscConfig+0x27c>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f38:	f7fe fde4 	bl	8000b04 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f40:	f7fe fde0 	bl	8000b04 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e173      	b.n	800223a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x234>
 8001f5e:	e01b      	b.n	8001f98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_RCC_OscConfig+0x27c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f66:	f7fe fdcd 	bl	8000b04 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6c:	e00e      	b.n	8001f8c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f6e:	f7fe fdc9 	bl	8000b04 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d907      	bls.n	8001f8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e15c      	b.n	800223a <HAL_RCC_OscConfig+0x52e>
 8001f80:	40023800 	.word	0x40023800
 8001f84:	42470000 	.word	0x42470000
 8001f88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f8c:	4b8a      	ldr	r3, [pc, #552]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1ea      	bne.n	8001f6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 8097 	beq.w	80020d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001faa:	4b83      	ldr	r3, [pc, #524]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10f      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	4b7f      	ldr	r3, [pc, #508]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	4a7e      	ldr	r2, [pc, #504]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc6:	4b7c      	ldr	r3, [pc, #496]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd6:	4b79      	ldr	r3, [pc, #484]	; (80021bc <HAL_RCC_OscConfig+0x4b0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d118      	bne.n	8002014 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe2:	4b76      	ldr	r3, [pc, #472]	; (80021bc <HAL_RCC_OscConfig+0x4b0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a75      	ldr	r2, [pc, #468]	; (80021bc <HAL_RCC_OscConfig+0x4b0>)
 8001fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fee:	f7fe fd89 	bl	8000b04 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff6:	f7fe fd85 	bl	8000b04 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e118      	b.n	800223a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002008:	4b6c      	ldr	r3, [pc, #432]	; (80021bc <HAL_RCC_OscConfig+0x4b0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d106      	bne.n	800202a <HAL_RCC_OscConfig+0x31e>
 800201c:	4b66      	ldr	r3, [pc, #408]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 800201e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002020:	4a65      	ldr	r2, [pc, #404]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6713      	str	r3, [r2, #112]	; 0x70
 8002028:	e01c      	b.n	8002064 <HAL_RCC_OscConfig+0x358>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b05      	cmp	r3, #5
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0x340>
 8002032:	4b61      	ldr	r3, [pc, #388]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 8002034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002036:	4a60      	ldr	r2, [pc, #384]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	6713      	str	r3, [r2, #112]	; 0x70
 800203e:	4b5e      	ldr	r3, [pc, #376]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	4a5d      	ldr	r2, [pc, #372]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6713      	str	r3, [r2, #112]	; 0x70
 800204a:	e00b      	b.n	8002064 <HAL_RCC_OscConfig+0x358>
 800204c:	4b5a      	ldr	r3, [pc, #360]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002050:	4a59      	ldr	r2, [pc, #356]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	6713      	str	r3, [r2, #112]	; 0x70
 8002058:	4b57      	ldr	r3, [pc, #348]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 800205a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205c:	4a56      	ldr	r2, [pc, #344]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 800205e:	f023 0304 	bic.w	r3, r3, #4
 8002062:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d015      	beq.n	8002098 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7fe fd4a 	bl	8000b04 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002072:	e00a      	b.n	800208a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002074:	f7fe fd46 	bl	8000b04 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e0d7      	b.n	800223a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208a:	4b4b      	ldr	r3, [pc, #300]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0ee      	beq.n	8002074 <HAL_RCC_OscConfig+0x368>
 8002096:	e014      	b.n	80020c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002098:	f7fe fd34 	bl	8000b04 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a0:	f7fe fd30 	bl	8000b04 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e0c1      	b.n	800223a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b6:	4b40      	ldr	r3, [pc, #256]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1ee      	bne.n	80020a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c2:	7dfb      	ldrb	r3, [r7, #23]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d105      	bne.n	80020d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c8:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	4a3a      	ldr	r2, [pc, #232]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 80020ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 80ad 	beq.w	8002238 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020de:	4b36      	ldr	r3, [pc, #216]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d060      	beq.n	80021ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d145      	bne.n	800217e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f2:	4b33      	ldr	r3, [pc, #204]	; (80021c0 <HAL_RCC_OscConfig+0x4b4>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe fd04 	bl	8000b04 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002100:	f7fe fd00 	bl	8000b04 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e093      	b.n	800223a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002112:	4b29      	ldr	r3, [pc, #164]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69da      	ldr	r2, [r3, #28]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	019b      	lsls	r3, r3, #6
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	085b      	lsrs	r3, r3, #1
 8002136:	3b01      	subs	r3, #1
 8002138:	041b      	lsls	r3, r3, #16
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	061b      	lsls	r3, r3, #24
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	071b      	lsls	r3, r3, #28
 800214a:	491b      	ldr	r1, [pc, #108]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <HAL_RCC_OscConfig+0x4b4>)
 8002152:	2201      	movs	r2, #1
 8002154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7fe fcd5 	bl	8000b04 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215e:	f7fe fcd1 	bl	8000b04 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e064      	b.n	800223a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x452>
 800217c:	e05c      	b.n	8002238 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <HAL_RCC_OscConfig+0x4b4>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7fe fcbe 	bl	8000b04 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218c:	f7fe fcba 	bl	8000b04 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e04d      	b.n	800223a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_RCC_OscConfig+0x4ac>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x480>
 80021aa:	e045      	b.n	8002238 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d107      	bne.n	80021c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e040      	b.n	800223a <HAL_RCC_OscConfig+0x52e>
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40007000 	.word	0x40007000
 80021c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021c4:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <HAL_RCC_OscConfig+0x538>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d030      	beq.n	8002234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d129      	bne.n	8002234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d122      	bne.n	8002234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021f4:	4013      	ands	r3, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d119      	bne.n	8002234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	085b      	lsrs	r3, r3, #1
 800220c:	3b01      	subs	r3, #1
 800220e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002210:	429a      	cmp	r2, r3
 8002212:	d10f      	bne.n	8002234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d107      	bne.n	8002234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800

08002248 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e03f      	b.n	80022da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7fe fb70 	bl	8000954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2224      	movs	r2, #36	; 0x24
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800228a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f829 	bl	80022e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695a      	ldr	r2, [r3, #20]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022e8:	b0c0      	sub	sp, #256	; 0x100
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002300:	68d9      	ldr	r1, [r3, #12]
 8002302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	ea40 0301 	orr.w	r3, r0, r1
 800230c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800230e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	431a      	orrs	r2, r3
 800231c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	431a      	orrs	r2, r3
 8002324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800233c:	f021 010c 	bic.w	r1, r1, #12
 8002340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800234a:	430b      	orrs	r3, r1
 800234c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800234e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800235a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800235e:	6999      	ldr	r1, [r3, #24]
 8002360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	ea40 0301 	orr.w	r3, r0, r1
 800236a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800236c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4b8f      	ldr	r3, [pc, #572]	; (80025b0 <UART_SetConfig+0x2cc>)
 8002374:	429a      	cmp	r2, r3
 8002376:	d005      	beq.n	8002384 <UART_SetConfig+0xa0>
 8002378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4b8d      	ldr	r3, [pc, #564]	; (80025b4 <UART_SetConfig+0x2d0>)
 8002380:	429a      	cmp	r2, r3
 8002382:	d104      	bne.n	800238e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002384:	f7ff fa7e 	bl	8001884 <HAL_RCC_GetPCLK2Freq>
 8002388:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800238c:	e003      	b.n	8002396 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800238e:	f7ff fa65 	bl	800185c <HAL_RCC_GetPCLK1Freq>
 8002392:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023a0:	f040 810c 	bne.w	80025bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023a8:	2200      	movs	r2, #0
 80023aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80023ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80023b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80023b6:	4622      	mov	r2, r4
 80023b8:	462b      	mov	r3, r5
 80023ba:	1891      	adds	r1, r2, r2
 80023bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80023be:	415b      	adcs	r3, r3
 80023c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023c6:	4621      	mov	r1, r4
 80023c8:	eb12 0801 	adds.w	r8, r2, r1
 80023cc:	4629      	mov	r1, r5
 80023ce:	eb43 0901 	adc.w	r9, r3, r1
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023e6:	4690      	mov	r8, r2
 80023e8:	4699      	mov	r9, r3
 80023ea:	4623      	mov	r3, r4
 80023ec:	eb18 0303 	adds.w	r3, r8, r3
 80023f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80023f4:	462b      	mov	r3, r5
 80023f6:	eb49 0303 	adc.w	r3, r9, r3
 80023fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800240a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800240e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002412:	460b      	mov	r3, r1
 8002414:	18db      	adds	r3, r3, r3
 8002416:	653b      	str	r3, [r7, #80]	; 0x50
 8002418:	4613      	mov	r3, r2
 800241a:	eb42 0303 	adc.w	r3, r2, r3
 800241e:	657b      	str	r3, [r7, #84]	; 0x54
 8002420:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002424:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002428:	f7fd feec 	bl	8000204 <__aeabi_uldivmod>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4b61      	ldr	r3, [pc, #388]	; (80025b8 <UART_SetConfig+0x2d4>)
 8002432:	fba3 2302 	umull	r2, r3, r3, r2
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	011c      	lsls	r4, r3, #4
 800243a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800243e:	2200      	movs	r2, #0
 8002440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002444:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002448:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800244c:	4642      	mov	r2, r8
 800244e:	464b      	mov	r3, r9
 8002450:	1891      	adds	r1, r2, r2
 8002452:	64b9      	str	r1, [r7, #72]	; 0x48
 8002454:	415b      	adcs	r3, r3
 8002456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002458:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800245c:	4641      	mov	r1, r8
 800245e:	eb12 0a01 	adds.w	sl, r2, r1
 8002462:	4649      	mov	r1, r9
 8002464:	eb43 0b01 	adc.w	fp, r3, r1
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002474:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002478:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800247c:	4692      	mov	sl, r2
 800247e:	469b      	mov	fp, r3
 8002480:	4643      	mov	r3, r8
 8002482:	eb1a 0303 	adds.w	r3, sl, r3
 8002486:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800248a:	464b      	mov	r3, r9
 800248c:	eb4b 0303 	adc.w	r3, fp, r3
 8002490:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80024a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80024a8:	460b      	mov	r3, r1
 80024aa:	18db      	adds	r3, r3, r3
 80024ac:	643b      	str	r3, [r7, #64]	; 0x40
 80024ae:	4613      	mov	r3, r2
 80024b0:	eb42 0303 	adc.w	r3, r2, r3
 80024b4:	647b      	str	r3, [r7, #68]	; 0x44
 80024b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80024be:	f7fd fea1 	bl	8000204 <__aeabi_uldivmod>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4611      	mov	r1, r2
 80024c8:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <UART_SetConfig+0x2d4>)
 80024ca:	fba3 2301 	umull	r2, r3, r3, r1
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	2264      	movs	r2, #100	; 0x64
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	1acb      	subs	r3, r1, r3
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80024de:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <UART_SetConfig+0x2d4>)
 80024e0:	fba3 2302 	umull	r2, r3, r3, r2
 80024e4:	095b      	lsrs	r3, r3, #5
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024ec:	441c      	add	r4, r3
 80024ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024f2:	2200      	movs	r2, #0
 80024f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80024fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002500:	4642      	mov	r2, r8
 8002502:	464b      	mov	r3, r9
 8002504:	1891      	adds	r1, r2, r2
 8002506:	63b9      	str	r1, [r7, #56]	; 0x38
 8002508:	415b      	adcs	r3, r3
 800250a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800250c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002510:	4641      	mov	r1, r8
 8002512:	1851      	adds	r1, r2, r1
 8002514:	6339      	str	r1, [r7, #48]	; 0x30
 8002516:	4649      	mov	r1, r9
 8002518:	414b      	adcs	r3, r1
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002528:	4659      	mov	r1, fp
 800252a:	00cb      	lsls	r3, r1, #3
 800252c:	4651      	mov	r1, sl
 800252e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002532:	4651      	mov	r1, sl
 8002534:	00ca      	lsls	r2, r1, #3
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
 800253a:	4603      	mov	r3, r0
 800253c:	4642      	mov	r2, r8
 800253e:	189b      	adds	r3, r3, r2
 8002540:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002544:	464b      	mov	r3, r9
 8002546:	460a      	mov	r2, r1
 8002548:	eb42 0303 	adc.w	r3, r2, r3
 800254c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800255c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002560:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002564:	460b      	mov	r3, r1
 8002566:	18db      	adds	r3, r3, r3
 8002568:	62bb      	str	r3, [r7, #40]	; 0x28
 800256a:	4613      	mov	r3, r2
 800256c:	eb42 0303 	adc.w	r3, r2, r3
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002572:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002576:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800257a:	f7fd fe43 	bl	8000204 <__aeabi_uldivmod>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <UART_SetConfig+0x2d4>)
 8002584:	fba3 1302 	umull	r1, r3, r3, r2
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	2164      	movs	r1, #100	; 0x64
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	3332      	adds	r3, #50	; 0x32
 8002596:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <UART_SetConfig+0x2d4>)
 8002598:	fba2 2303 	umull	r2, r3, r2, r3
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	f003 0207 	and.w	r2, r3, #7
 80025a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4422      	add	r2, r4
 80025aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025ac:	e106      	b.n	80027bc <UART_SetConfig+0x4d8>
 80025ae:	bf00      	nop
 80025b0:	40011000 	.word	0x40011000
 80025b4:	40011400 	.word	0x40011400
 80025b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025c0:	2200      	movs	r2, #0
 80025c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80025ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80025ce:	4642      	mov	r2, r8
 80025d0:	464b      	mov	r3, r9
 80025d2:	1891      	adds	r1, r2, r2
 80025d4:	6239      	str	r1, [r7, #32]
 80025d6:	415b      	adcs	r3, r3
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
 80025da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025de:	4641      	mov	r1, r8
 80025e0:	1854      	adds	r4, r2, r1
 80025e2:	4649      	mov	r1, r9
 80025e4:	eb43 0501 	adc.w	r5, r3, r1
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	00eb      	lsls	r3, r5, #3
 80025f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025f6:	00e2      	lsls	r2, r4, #3
 80025f8:	4614      	mov	r4, r2
 80025fa:	461d      	mov	r5, r3
 80025fc:	4643      	mov	r3, r8
 80025fe:	18e3      	adds	r3, r4, r3
 8002600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002604:	464b      	mov	r3, r9
 8002606:	eb45 0303 	adc.w	r3, r5, r3
 800260a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800260e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800261a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800262a:	4629      	mov	r1, r5
 800262c:	008b      	lsls	r3, r1, #2
 800262e:	4621      	mov	r1, r4
 8002630:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002634:	4621      	mov	r1, r4
 8002636:	008a      	lsls	r2, r1, #2
 8002638:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800263c:	f7fd fde2 	bl	8000204 <__aeabi_uldivmod>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4b60      	ldr	r3, [pc, #384]	; (80027c8 <UART_SetConfig+0x4e4>)
 8002646:	fba3 2302 	umull	r2, r3, r3, r2
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	011c      	lsls	r4, r3, #4
 800264e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002652:	2200      	movs	r2, #0
 8002654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002658:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800265c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002660:	4642      	mov	r2, r8
 8002662:	464b      	mov	r3, r9
 8002664:	1891      	adds	r1, r2, r2
 8002666:	61b9      	str	r1, [r7, #24]
 8002668:	415b      	adcs	r3, r3
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002670:	4641      	mov	r1, r8
 8002672:	1851      	adds	r1, r2, r1
 8002674:	6139      	str	r1, [r7, #16]
 8002676:	4649      	mov	r1, r9
 8002678:	414b      	adcs	r3, r1
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002688:	4659      	mov	r1, fp
 800268a:	00cb      	lsls	r3, r1, #3
 800268c:	4651      	mov	r1, sl
 800268e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002692:	4651      	mov	r1, sl
 8002694:	00ca      	lsls	r2, r1, #3
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	4603      	mov	r3, r0
 800269c:	4642      	mov	r2, r8
 800269e:	189b      	adds	r3, r3, r2
 80026a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026a4:	464b      	mov	r3, r9
 80026a6:	460a      	mov	r2, r1
 80026a8:	eb42 0303 	adc.w	r3, r2, r3
 80026ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80026ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80026c8:	4649      	mov	r1, r9
 80026ca:	008b      	lsls	r3, r1, #2
 80026cc:	4641      	mov	r1, r8
 80026ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026d2:	4641      	mov	r1, r8
 80026d4:	008a      	lsls	r2, r1, #2
 80026d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80026da:	f7fd fd93 	bl	8000204 <__aeabi_uldivmod>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4611      	mov	r1, r2
 80026e4:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <UART_SetConfig+0x4e4>)
 80026e6:	fba3 2301 	umull	r2, r3, r3, r1
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	2264      	movs	r2, #100	; 0x64
 80026ee:	fb02 f303 	mul.w	r3, r2, r3
 80026f2:	1acb      	subs	r3, r1, r3
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	3332      	adds	r3, #50	; 0x32
 80026f8:	4a33      	ldr	r2, [pc, #204]	; (80027c8 <UART_SetConfig+0x4e4>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002704:	441c      	add	r4, r3
 8002706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800270a:	2200      	movs	r2, #0
 800270c:	673b      	str	r3, [r7, #112]	; 0x70
 800270e:	677a      	str	r2, [r7, #116]	; 0x74
 8002710:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002714:	4642      	mov	r2, r8
 8002716:	464b      	mov	r3, r9
 8002718:	1891      	adds	r1, r2, r2
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	415b      	adcs	r3, r3
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002724:	4641      	mov	r1, r8
 8002726:	1851      	adds	r1, r2, r1
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	4649      	mov	r1, r9
 800272c:	414b      	adcs	r3, r1
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800273c:	4659      	mov	r1, fp
 800273e:	00cb      	lsls	r3, r1, #3
 8002740:	4651      	mov	r1, sl
 8002742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002746:	4651      	mov	r1, sl
 8002748:	00ca      	lsls	r2, r1, #3
 800274a:	4610      	mov	r0, r2
 800274c:	4619      	mov	r1, r3
 800274e:	4603      	mov	r3, r0
 8002750:	4642      	mov	r2, r8
 8002752:	189b      	adds	r3, r3, r2
 8002754:	66bb      	str	r3, [r7, #104]	; 0x68
 8002756:	464b      	mov	r3, r9
 8002758:	460a      	mov	r2, r1
 800275a:	eb42 0303 	adc.w	r3, r2, r3
 800275e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	663b      	str	r3, [r7, #96]	; 0x60
 800276a:	667a      	str	r2, [r7, #100]	; 0x64
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002778:	4649      	mov	r1, r9
 800277a:	008b      	lsls	r3, r1, #2
 800277c:	4641      	mov	r1, r8
 800277e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002782:	4641      	mov	r1, r8
 8002784:	008a      	lsls	r2, r1, #2
 8002786:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800278a:	f7fd fd3b 	bl	8000204 <__aeabi_uldivmod>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <UART_SetConfig+0x4e4>)
 8002794:	fba3 1302 	umull	r1, r3, r3, r2
 8002798:	095b      	lsrs	r3, r3, #5
 800279a:	2164      	movs	r1, #100	; 0x64
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	3332      	adds	r3, #50	; 0x32
 80027a6:	4a08      	ldr	r2, [pc, #32]	; (80027c8 <UART_SetConfig+0x4e4>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	f003 020f 	and.w	r2, r3, #15
 80027b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4422      	add	r2, r4
 80027ba:	609a      	str	r2, [r3, #8]
}
 80027bc:	bf00      	nop
 80027be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80027c2:	46bd      	mov	sp, r7
 80027c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027c8:	51eb851f 	.word	0x51eb851f

080027cc <memset>:
 80027cc:	4402      	add	r2, r0
 80027ce:	4603      	mov	r3, r0
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d100      	bne.n	80027d6 <memset+0xa>
 80027d4:	4770      	bx	lr
 80027d6:	f803 1b01 	strb.w	r1, [r3], #1
 80027da:	e7f9      	b.n	80027d0 <memset+0x4>

080027dc <__libc_init_array>:
 80027dc:	b570      	push	{r4, r5, r6, lr}
 80027de:	4d0d      	ldr	r5, [pc, #52]	; (8002814 <__libc_init_array+0x38>)
 80027e0:	4c0d      	ldr	r4, [pc, #52]	; (8002818 <__libc_init_array+0x3c>)
 80027e2:	1b64      	subs	r4, r4, r5
 80027e4:	10a4      	asrs	r4, r4, #2
 80027e6:	2600      	movs	r6, #0
 80027e8:	42a6      	cmp	r6, r4
 80027ea:	d109      	bne.n	8002800 <__libc_init_array+0x24>
 80027ec:	4d0b      	ldr	r5, [pc, #44]	; (800281c <__libc_init_array+0x40>)
 80027ee:	4c0c      	ldr	r4, [pc, #48]	; (8002820 <__libc_init_array+0x44>)
 80027f0:	f000 f818 	bl	8002824 <_init>
 80027f4:	1b64      	subs	r4, r4, r5
 80027f6:	10a4      	asrs	r4, r4, #2
 80027f8:	2600      	movs	r6, #0
 80027fa:	42a6      	cmp	r6, r4
 80027fc:	d105      	bne.n	800280a <__libc_init_array+0x2e>
 80027fe:	bd70      	pop	{r4, r5, r6, pc}
 8002800:	f855 3b04 	ldr.w	r3, [r5], #4
 8002804:	4798      	blx	r3
 8002806:	3601      	adds	r6, #1
 8002808:	e7ee      	b.n	80027e8 <__libc_init_array+0xc>
 800280a:	f855 3b04 	ldr.w	r3, [r5], #4
 800280e:	4798      	blx	r3
 8002810:	3601      	adds	r6, #1
 8002812:	e7f2      	b.n	80027fa <__libc_init_array+0x1e>
 8002814:	0800285c 	.word	0x0800285c
 8002818:	0800285c 	.word	0x0800285c
 800281c:	0800285c 	.word	0x0800285c
 8002820:	08002860 	.word	0x08002860

08002824 <_init>:
 8002824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002826:	bf00      	nop
 8002828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282a:	bc08      	pop	{r3}
 800282c:	469e      	mov	lr, r3
 800282e:	4770      	bx	lr

08002830 <_fini>:
 8002830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002832:	bf00      	nop
 8002834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002836:	bc08      	pop	{r3}
 8002838:	469e      	mov	lr, r3
 800283a:	4770      	bx	lr
